{
  "openapi": "3.1.0",
  "info": {
    "title": "Cortex API",
    "description": "Documentation for Cortex's core upload and retrieval endpoints",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.usecortex.ai"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/upload/scrape_webpage": {
      "post": {
        "description": "Scrapes and processes content from a public webpage.",
        "parameters": [
          {
            "name": "web_url",
            "in": "query",
            "required": true,
            "description": "The public URL to scrape",
            "schema": {
              "type": "string"
            },
            "example": "https://example.com/article"
          },
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "description": "Tenant identifier",
            "schema": {
              "type": "string"
            },
            "example": "tenant_456"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "description": "Sub-tenant identifier",
            "schema": {
              "type": "string"
            },
            "example": "subtenant_123"
          }
        ],
        "responses": {
          "200": {
            "description": "Webpage scraped successfully"
          }
        }
      }
    },
    "/upload/upload_document": {
      "post": {
        "description": "Uploads a document (e.g., PDF, DOCX) for processing and indexing.",
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "description": "Tenant identifier",
            "schema": {
              "type": "string"
            },
            "example": "your_tenant_id"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "description": "Sub-tenant identifier",
            "schema": {
              "type": "string"
            },
            "example": "your_sub_tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "Document file to upload (PDF, DOCX, TXT, etc.)",
                    "example": "document.pdf"
                  },
                  "custom_metadata": {
                    "type": "string",
                    "description": "JSON string containing custom metadata for the document",
                    "example": "{\"author\":\"John Doe\",\"department\":\"Sales\"}"
                  }
                },
                "required": [
                  "file"
                ]
              },
              "examples": {
                "document_upload": {
                  "summary": "Upload a PDF document",
                  "description": "Example of uploading a PDF document with custom metadata",
                  "value": {
                    "file": "document.pdf",
                    "custom_metadata": "{\"author\":\"John Doe\",\"department\":\"Sales\",\"tags\":[\"contract\",\"Q1\"]}"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Document uploaded and indexed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Document uploaded successfully"
                    },
                    "document_id": {
                      "type": "string",
                      "example": "doc_123456"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/upload/batch_upload": {
      "post": {
        "description": "Uploads multiple documents in a single request for processing and indexing.",
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "description": "Tenant identifier",
            "schema": {
              "type": "string"
            },
            "example": "your_tenant_id"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "description": "Sub-tenant identifier",
            "schema": {
              "type": "string"
            },
            "example": "your_sub_tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "description": "Multiple document files to upload (PDF, DOCX, TXT, etc.)"
                  },
                  "custom_metadata": {
                    "type": "string",
                    "description": "JSON string containing custom metadata for the documents"
                  }
                },
                "required": [
                  "files"
                ]
              },
              "examples": {
                "batch_upload": {
                  "summary": "Upload multiple documents",
                  "description": "Example of uploading multiple documents with custom metadata",
                  "value": {
                    "files": ["document1.pdf", "document2.docx", "document3.txt"],
                    "custom_metadata": "[{\"author\":\"John Doe\",\"department\":\"Sales\"},{\"author\":\"Jane Smith\",\"department\":\"Marketing\"}]"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Batch upload successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Batch upload successful"
                    },
                    "document_ids": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": ["doc_123", "doc_456", "doc_789"]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/upload/upload_app_sources": {
      "post": {
        "description": "Works similar to the upload endpoint but is specifically designed to upload multiple app sources (e.g., Gmail, Slack, Notion) in a single request for processing and indexing.",
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "description": "Tenant identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "description": "Sub-tenant identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "collections": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "id": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "note": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "content": {
                      "type": "object",
                      "properties": {
                        "text": {
                          "type": "string"
                        },
                        "html_base64": {
                          "type": "string"
                        },
                        "csv_base64": {
                          "type": "string"
                        },
                        "markdown": {
                          "type": "string"
                        },
                        "files": {
                          "type": "array"
                        },
                        "layout": {
                          "type": "array"
                        }
                      }
                    },
                    "cortex_metadata": {
                      "type": "object"
                    },
                    "meta": {
                      "type": "object"
                    },
                    "attachments": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string"
                          },
                          "title": {
                            "type": "string"
                          },
                          "content_type": {
                            "type": "string"
                          },
                          "content_url": {
                            "type": "string"
                          },
                          "misc": {
                            "type": "object"
                          },
                          "content": {
                            "type": "object",
                            "properties": {
                              "text": {
                                "type": "string"
                              },
                              "html_base64": {
                                "type": "string"
                              },
                              "csv_base64": {
                                "type": "string"
                              },
                              "markdown": {
                                "type": "string"
                              },
                              "files": {
                                "type": "array"
                              },
                              "layout": {
                                "type": "array"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "id",
                    "title",
                    "type",
                    "timestamp",
                    "content"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "App sources uploaded successfully"
          }
        }
      }
    },
    "/search/qna": {
      "post": {
        "description": "Ask a question based on uploaded documents or sessions.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "question": {"type": "string", "description": "The user query"},
                  "user_name": {"type": "string", "description": "User name"},
                  "user_instructions": {"type": "string", "description": "Custom instructions"},
                  "session_id": {"type": "string", "description": "Chat session ID"},
                  "tenant_id": {"type": "string", "description": "Tenant identifier"},
                  "sub_tenant_id": {"type": "string", "description": "Sub-tenant identifier"},
                  "stream": {"type": "boolean", "description": "Enable streaming"},
                  "context_list": {"type": "array", "items": {"type": "string"}, "description": "List of document IDs"},
                  "search_modes": {"type": "array", "items": {"type": "string"}, "description": "e.g., 'creative', 'web'"},
                  "top_n": {"type": "number", "description": "Number of results to return"},
                  "ai_generation": {"type": "boolean", "description": "Enable AI answer generation"},
                  "highlight_chunks": {"type": "boolean", "description": "Return source chunks"},
                  "search_alpha": {"type": "number", "format": "float", "description": "Weight for semantic match"},
                  "recency_bias": {"type": "number", "format": "float", "description": "Recency preference"},
                  "multi_step_reasoning": {"type": "boolean", "default": true, "description": "If enabled, the system will automatically activate multi-step search for complex queries. If set to false, auto-enabling of multi-step search is disabled, and only single-step search will be used regardless of query complexity."},
                  "auto_agent_routing": {"type": "boolean", "default": true, "description": "If true, enables routing for choosing the best suitable agent automatically; if false, the answer is generated from the default model."},
                  "metadata": {
                    "type": "object",
                    "description": "Filter context to only sources matching the provided metadata. Allowed keys: source_title, source_type.",
                    "properties": {
                      "source_title": {"type": "string", "description": "Restrict to sources with this title."},
                      "source_type": {"type": "string", "description": "Restrict to sources of this type (e.g., document, webpage)."}
                    },
                    "additionalProperties": false
                  }
                },
                "required": ["question", "session_id", "tenant_id"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Question answered successfully"
          }
        }
      }
    },
    "/list/sources": {
      "get": {
        "description": "Fetches all sources/documents for a given tenant.",
        "parameters": [
          {"name": "tenant_id", "in": "query", "required": true, "description": "Tenant identifier", "schema": {"type": "string"}, "example": "tenant_456"},
          {"name": "sub_tenant_id", "in": "query", "required": false, "description": "Optional filter", "schema": {"type": "string"}, "example": "subtenant_123"}
        ],
        "responses": {"200": {"description": "List of sources returned successfully"}}
      }
    },
    "/list/sources_by_id": {
      "post": {
        "description": "Fetches specific sources/documents by their IDs.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tenant_id": {"type": "string", "description": "Tenant identifier", "example": "tenant_456"},
                  "sub_tenant_id": {"type": "string", "description": "Optional filter", "example": "subtenant_123"},
                  "source_ids": {"type": "array", "items": {"type": "string"}, "description": "IDs of documents", "example": ["doc_123", "doc_456"]}
                },
                "required": ["tenant_id", "source_ids"]
              }
            }
          }
        },
        "responses": {"200": {"description": "Sources returned successfully"}}
      }
    },
    "/upload/delete_memory": {
      "delete": {
        "description": "Deletes specific documents or memories associated with a user.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tenant_id": {"type": "string", "description": "Tenant identifier", "example": "tenant_456"},
                  "source_ids": {"type": "array", "items": {"type": "string"}, "description": "IDs of documents to delete", "example": ["doc_123", "doc_456"]}
                },
                "required": ["tenant_id", "source_ids"]
              }
            }
          }
        },
        "responses": {"200": {"description": "Memory deleted successfully"}}
      },
      "post": {
        "description": "Deletes specific documents or memories associated with a user (POST alternative).",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tenant_id": {"type": "string", "description": "Tenant identifier", "example": "tenant_456"},
                  "source_ids": {"type": "array", "items": {"type": "string"}, "description": "IDs of documents to delete", "example": ["doc_123", "doc_456"]}
                },
                "required": ["tenant_id", "source_ids"]
              }
            }
          }
        },
        "responses": {"200": {"description": "Memory deleted successfully (POST)"}}
      }
    },
    "/upload/verify_processing": {
      "post": {
        "description": "Checks if a document has been successfully processed.",
        "parameters": [
          {"name": "file_id", "in": "query", "required": true, "description": "ID of the uploaded file", "schema": {"type": "string"}, "example": "file_123"}
        ],
        "responses": {
          "200": {
            "description": "Processing status returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file_id": {"type": "string", "description": "ID of the uploaded file", "example": "123123123123"},
                    "indexing_status": {"type": "string", "enum": ["success", "in_progress", "errored"], "description": "Indexing status of the file", "example": "success"}
                  },
                  "required": ["file_id", "indexing_status"]
                },
                "example": {
                  "file_id": "123123123123",
                  "indexing_status": "success"
                }
              }
            }
          }
        }
      }
    },
    "/fetch/fetch_content": {
      "post": {
        "description": "Fetches the download URL for a specific uploaded source/document.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file_id": {"type": "string", "description": "ID of the file to fetch the download URL for."},
                  "tenant_id": {"type": "string", "description": "Tenant identifier."},
                  "sub_tenant_id": {"type": "string", "description": "Sub-tenant identifier.", "default": ""}
                },
                "required": ["file_id", "tenant_id"]
              },
              "examples": {
                "fetch_content": {
                  "summary": "Fetch download URL for a file",
                  "value": {
                    "file_id": "file_123456",
                    "tenant_id": "tenant_456",
                    "sub_tenant_id": "subtenant_123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Download URL(s) fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {"type": "string", "description": "Download URL for the file ID key."}
                },
                "example": {
                  "CortexDocb7a1db714c9c473bbd8ff81ec17ba2811750936047": "https://cortex-local-sources-prod.s3.amazonaws.com/ToayuCogoBdxZVoZQ1ft8ZoRzCO2/FindrMasterCollectionMemoriesPreprod/123/local_source/CortexDocb7a1db714c9c473bbd8ff81ec17ba2811750936047?..."
                }
              }
            }
          },
          "404": {
            "description": "File not found or not accessible."
          }
        }
      }
    },
    "/list_user_memories": {
      "get": {
        "description": "Retrieves and lists all echo memories for a cortex user.",
        "responses": {
          "200": {
            "description": "List of user memories returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "source_id": {"type": "string", "description": "Unique identifier for the memory"},
                      "source_content": {"type": "string", "description": "Content of the echo memory"}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/delete_user_memory": {
      "delete": {
        "description": "Deletes a specific echo memory for a cortex user.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "memory_id": {"type": "string", "description": "Echo memory ID to delete", "example": "memory_123"}
                },
                "required": ["memory_id"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Memory deletion result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "description": "Success (true) or failure (false) of the deletion operation"
                }
              }
            }
          }
        }
      }
    },
    "/retrieve_user_memory": {
      "get": {
        "description": "Searches and retrieves relevant echo memories based on a query.",
        "parameters": [
          {"name": "query", "in": "query", "required": true, "description": "Search query to find relevant memories", "schema": {"type": "string"}, "example": "project meeting notes"},
          {"name": "max_count", "in": "query", "required": false, "description": "Maximum number of memories to return", "schema": {"type": "integer"}, "example": 10}
        ],
        "responses": {
          "200": {
            "description": "Relevant memories returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "Echo memory objects matching the search query"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/add_user_memory": {
      "post": {
        "description": "Manually adds a new echo memory for a cortex user.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {"type": "string", "description": "The echo memory content to add", "example": "Remember to follow up on the Q1 budget proposal"},
                  "metadata": {
                    "type": "object",
                    "description": "Additional metadata for the memory",
                    "properties": {
                      "title": {"type": "string", "description": "Title for the memory", "example": "Q1 Budget Follow-up"},
                      "type": {"type": "string", "description": "Type classification for the memory", "example": "task"}
                    }
                  }
                },
                "required": ["content"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Memory insertion result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "description": "Success (true) or failure (false) of the memory insertion"
                }
              }
            }
          }
        }
      }
    },
    "/generate_user_memory": {
      "post": {
        "description": "Automatically generates and saves echo memories based on a user query. The most sophisticated endpoint that combines query processing, memory generation, and storage.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {"type": "string", "description": "User query to generate memories from", "example": "I had a productive meeting with the sales team about Q2 targets"},
                  "user_name": {"type": "string", "description": "Name of the user for personalization", "example": "John Doe"}
                },
                "required": ["query", "user_name"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Generated memories returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "Generated echo memory objects that were created and stored"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {},
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
