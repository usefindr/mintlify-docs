{
  "openapi": "3.1.0",
  "info": {
    "title": "Cortex SDK API",
    "description": "REST API wrapper around the Cortex Python SDK (Findr Integration)",
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "https://api.usecortex.ai",
      "description": "Production",
      "x-fern-server-name": "cortex-prod"
    }
  ],
  "paths": {
    "/search/qna": {
      "post": {
        "tags": [
          "search"
        ],
        "summary": "Qna",
        "description": "Ask a question to your uploaded knowledge base and let Cortex AI answer it.",
        "operationId": "qna_search_qna_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QnARequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-group-name": "search",
        "x-fern-sdk-method-name": "qna",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/list/sources": {
      "get": {
        "tags": [
          "list"
        ],
        "summary": "Get Sources",
        "description": "Retrieve all sources for a specific tenant.\n\nUse this endpoint to fetch a complete list of all sources associated with your tenant. This includes documents, files, and other content you've uploaded for processing.\n\nYou can optionally specify a sub-tenant to narrow down the results to sources within that specific sub-tenant scope.",
        "operationId": "get_sources_list_sources_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id",
              "default": "tenant_1234"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "sub_tenant_4567",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSourcesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "sources",
        "x-fern-sdk-method-name": "get_all",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/list/sources_by_id": {
      "post": {
        "tags": [
          "list"
        ],
        "summary": "Get Source By Id",
        "description": "Retrieve specific sources by their IDs.\n\nUse this endpoint to fetch one or more sources by providing their unique identifiers. This is useful when you need detailed information about specific documents or content you've previously uploaded.\n\nProvide the source IDs in the request body along with your tenant information to get the exact sources you need.",
        "operationId": "get_source_by_id_list_sources_by_id_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceBodyParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSourcesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-group-name": "sources",
        "x-fern-sdk-method-name": "get_by_ids",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/user_memory/list_user_memories": {
      "get": {
        "tags": [
          "user_memory"
        ],
        "summary": "List User Memories",
        "description": "Retrieve all stored user memories for your tenant.\n\nThis endpoint returns a comprehensive list of all user memories that have been stored, \nwhether they were added manually or generated through AI. User memories help personalize \nyour experience by storing context, preferences, and important information.\n\nYou can optionally specify a sub-tenant to filter memories within that specific scope.",
        "operationId": "list_user_memories_user_memory_list_user_memories_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id",
              "default": "tenant_1234"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "sub_tenant_4567",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListUserMemoriesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "user_memory",
        "x-fern-sdk-method-name": "list_user_memories",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/user_memory/delete_user_memory": {
      "delete": {
        "tags": [
          "user_memory"
        ],
        "summary": "Delete User Memory",
        "description": "Permanently remove a specific user memory from storage.\n\nThis endpoint allows you to delete a user memory by its unique identifier. \nOnce deleted, the memory cannot be recovered, so use this operation carefully.\n\nThe memory will be removed from your tenant's storage and will no longer \nappear in search results or memory listings.",
        "operationId": "delete_user_memory_user_memory_delete_user_memory_delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id",
              "default": "tenant_1234"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "memory_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier of the memory to delete",
              "title": "Memory Id",
              "default": "memory_1234"
            },
            "description": "Unique identifier of the memory to delete"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "sub_tenant_4567",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteUserMemoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "user_memory",
        "x-fern-sdk-method-name": "delete_user_memory",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/user_memory/retrieve_user_memory": {
      "post": {
        "tags": [
          "user_memory"
        ],
        "summary": "Retrieve User Memory",
        "description": "Find relevant user memories using semantic search.\n\nThis endpoint performs a semantic search across all your stored user memories \nto find the most relevant ones based on your query. The results are ranked by \nsimilarity score, with the most relevant memories returned first.\n\nUse this to recall past preferences, context, or information that might be \nrelevant to your current task or query.",
        "operationId": "retrieve_user_memory_user_memory_retrieve_user_memory_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id",
              "default": "tenant_1234"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "sub_tenant_4567",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          },
          {
            "name": "max_count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "description": "Maximum number of memories to return (default: 5)",
              "default": 5,
              "title": "Max Count"
            },
            "description": "Maximum number of memories to return (default: 5)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetrieveUserMemoryRequest",
                "description": "Request body containing the search query"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrieveUserMemoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "user_memory",
        "x-fern-sdk-method-name": "retrieve_user_memory",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/user_memory/generate_user_memory": {
      "post": {
        "tags": [
          "user_memory"
        ],
        "summary": "Generate User Memory",
        "description": "Generate AI-powered user memories from your query and context.\n\nThis endpoint uses artificial intelligence to create personalized memories \nbased on your query and user context. The AI analyzes your input and generates \nrelevant, contextual memories that can help improve future interactions.\n\nGenerated memories are automatically stored and can be retrieved through \nthe standard memory search endpoints.",
        "operationId": "generate_user_memory_user_memory_generate_user_memory_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id",
              "default": "tenant_1234"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "sub_tenant_4567",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateUserMemoryRequest",
                "description": "Request body containing the user query and context"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateUserMemoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "user_memory",
        "x-fern-sdk-method-name": "generate_user_memory",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/user_memory/add_user_memory": {
      "post": {
        "tags": [
          "user_memory"
        ],
        "summary": "Add User Memory",
        "description": "Store a new user memory for future reference.\n\nThis endpoint allows you to manually add a memory that will be stored and \ncan be retrieved later through memory search. Use this to save important \npreferences, context, or information that you want the system to remember.\n\nThe stored memory will be indexed and available for semantic search, making \nit accessible when relevant to future queries or interactions.",
        "operationId": "add_user_memory_user_memory_add_user_memory_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id",
              "default": "tenant_1234"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "sub_tenant_4567",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUserMemoryRequest",
                "description": "Request body containing the user memory to add"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddUserMemoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "user_memory",
        "x-fern-sdk-method-name": "add_user_memory",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/fetch/fetch_content": {
      "post": {
        "tags": [
          "fetch"
        ],
        "summary": "Fetch Content",
        "operationId": "fetch_content_fetch_fetch_content_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FetchContentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchContentData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-group-name": "fetch",
        "x-fern-sdk-method-name": "fetch_content",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/batch_upload": {
      "post": {
        "tags": [
          "upload"
        ],
        "summary": "Batch Upload",
        "description": "Upload multiple documents simultaneously for efficient bulk processing.\n\nThis endpoint allows you to upload several files at once, which is ideal for large document collections or periodic data imports. Each file gets processed asynchronously, and you can track the progress of individual files using their returned file IDs.\n\nThe system automatically handles file parsing, content extraction, and indexing across all uploaded documents. You'll receive confirmation once all files are queued for processing.",
        "operationId": "batch_upload_upload_batch_upload_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id",
              "default": "tenant_1234"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "sub_tenant_4567",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_batch_upload_upload_batch_upload_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "batch_upload",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/batch_update": {
      "patch": {
        "tags": [
          "upload"
        ],
        "summary": "Batch Update",
        "description": "Update multiple existing documents with new content and metadata.\n\nUse this endpoint when you need to replace or modify several documents that are already in your knowledge base. Each file must correspond to an existing source ID, ensuring that updates are applied to the correct documents.\n\nThe system processes updates asynchronously, allowing you to continue working while your documents are re-indexed. Track the progress using the returned file IDs to know when updates are complete.",
        "operationId": "batch_update_upload_batch_update_patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id",
              "default": "tenant_1234"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "sub_tenant_4567",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_batch_update_upload_batch_update_patch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "batch_update",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/upload_document": {
      "post": {
        "tags": [
          "upload"
        ],
        "summary": "Upload Files",
        "description": "Upload a single document for processing and indexing into your knowledge base.\n\nThis endpoint accepts documents in various formats and processes them for search and retrieval. You can include custom metadata to help organize and categorize your content.\n\nThe system extracts text content, processes it asynchronously, and makes it available for search queries. You can track the processing status using the returned file ID.",
        "operationId": "upload_files_upload_upload_document_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id",
              "default": "tenant_1234"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "sub_tenant_4567",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_files_upload_upload_document_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "upload_document",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/update_document": {
      "patch": {
        "tags": [
          "upload"
        ],
        "summary": "Update File",
        "description": "Replace an existing document with updated content.\n\nThis endpoint allows you to update a specific document that's already in your knowledge base. Provide the source ID of the document you want to modify, along with the new file content.\n\nThe system will process your update asynchronously and re-index the document with the new content. You can monitor the progress using the returned file ID.",
        "operationId": "update_file_upload_update_document_patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The source ID of the document to update",
              "title": "Source Id",
              "default": "CortexDoc1234"
            },
            "description": "The source ID of the document to update"
          },
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id",
              "default": "tenant_1234"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "sub_tenant_4567",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_update_file_upload_update_document_patch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "update_document",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/upload_app_sources": {
      "post": {
        "tags": [
          "upload"
        ],
        "summary": "Upload App Sources",
        "description": "Upload structured data from applications or APIs for indexing.\n\nThis endpoint is designed for importing data from applications. If you are specifically using Cortex to provide search to an application, you should prefer this endpoint. It accepts structured source objects and allows you to clearly define contents of attachments\n\nThe system processes each source asynchronously and makes the content available for search and retrieval. Use this when you need to integrate search and indexing from data in your applications into your knowledge base.",
        "operationId": "upload_app_sources_upload_upload_app_sources_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id",
              "default": "tenant_1234"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "sub_tenant_4567",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SourceModel"
                },
                "description": "List of structured source objects containing app-generated data to be indexed",
                "title": "Sources"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppSourcesUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "upload_app_sources",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/upload_markdown": {
      "post": {
        "tags": [
          "upload"
        ],
        "summary": "Upload Markdown",
        "description": "Upload text or markdown content directly for processing.\n\nThis endpoint accepts plain text or markdown-formatted content that you want to add to your knowledge base. It's perfect for notes, documentation, articles, or any text-based content you want to make searchable.\n\nYou can include custom metadata to help organize and categorize your content. You can track the processing status using the returned file ID.",
        "operationId": "upload_markdown_upload_upload_markdown_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id",
              "default": "tenant_1234"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "sub_tenant_4567",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkdownUploadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "upload_markdown",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/upload_text": {
      "post": {
        "tags": [
          "upload"
        ],
        "summary": "Upload Markdown",
        "description": "Upload text or markdown content directly for processing.\n\nThis endpoint accepts plain text or markdown-formatted content that you want to add to your knowledge base. It's perfect for notes, documentation, articles, or any text-based content you want to make searchable.\n\nYou can include custom metadata to help organize and categorize your content. You can track the processing status using the returned file ID.",
        "operationId": "upload_markdown_upload_upload_text_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id",
              "default": "tenant_1234"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "sub_tenant_4567",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkdownUploadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "upload_text",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/update_markdown": {
      "patch": {
        "tags": [
          "upload"
        ],
        "summary": "Update Markdown",
        "description": "Update existing text or markdown content with new information.\n\nThis endpoint allows you to modify text or markdown content that's already in your knowledge base. Provide the source ID of the content you want to update, along with the new text.\n\nThe system will reprocess and re-index the updated content asynchronously. Use this when you need to correct information, add details, or refresh existing documentation.",
        "operationId": "update_markdown_upload_update_markdown_patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The source ID of the document to update",
              "title": "Source Id",
              "default": "CortexDoc1234"
            },
            "description": "The source ID of the document to update"
          },
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id",
              "default": "tenant_1234"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "sub_tenant_4567",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkdownUploadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "update_markdown",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/update_text": {
      "patch": {
        "tags": [
          "upload"
        ],
        "summary": "Update Markdown",
        "description": "Update existing text or markdown content with new information.\n\nThis endpoint allows you to modify text or markdown content that's already in your knowledge base. Provide the source ID of the content you want to update, along with the new text.\n\nThe system will reprocess and re-index the updated content asynchronously. Use this when you need to correct information, add details, or refresh existing documentation.",
        "operationId": "update_markdown_upload_update_text_patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The source ID of the document to update",
              "title": "Source Id",
              "default": "CortexDoc1234"
            },
            "description": "The source ID of the document to update"
          },
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id",
              "default": "tenant_1234"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "sub_tenant_4567",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkdownUploadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "update_text",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/upload_embeddings": {
      "post": {
        "tags": [
          "upload"
        ],
        "summary": "Upload Embeddings",
        "description": "Upload pre-computed embeddings for advanced similarity search.\n\nThis endpoint accepts vector embeddings that you've generated externally, allowing you to integrate with custom embedding models or existing vector databases. The embeddings represent chunks of your content as numerical vectors.\n\nThe system stores these embeddings and makes them available for semantic search and similarity matching. Use this when you want to leverage specialized embedding models or have existing vector representations.",
        "operationId": "upload_embeddings_upload_upload_embeddings_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id",
              "default": "tenant_1234"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "sub_tenant_4567",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingsUploadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "upload_embeddings",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/update_embeddings": {
      "patch": {
        "tags": [
          "upload"
        ],
        "summary": "Update Embeddings",
        "description": "Update existing embeddings with new vector representations.\n\nThis endpoint allows you to modify embeddings that are already stored in your knowledge base. Provide updated vector representations for specific chunks of content, identified by their chunk IDs.\n\nThe system will replace the existing embeddings with your new ones, ensuring that similarity searches reflect the most current vector representations. Use this when you need to update embeddings due to model improvements or content changes.",
        "operationId": "update_embeddings_upload_update_embeddings_patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id",
              "default": "tenant_1234"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "sub_tenant_4567",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingsUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "update_embeddings",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/scrape_webpage": {
      "post": {
        "tags": [
          "upload"
        ],
        "summary": "Scrape Webpage",
        "description": "Extract and index content from web pages automatically.\n\nThis endpoint initiates web scraping for the specified URL, extracting the main content, text, and structure from the webpage. It's perfect for capturing articles, documentation, or any web content you want to include in your knowledge base.\n\nThe system processes the webpage content asynchronously, cleaning and structuring the information for optimal search and retrieval. Use this when you need to add web content without manual copying and pasting.",
        "operationId": "scrape_webpage_upload_scrape_webpage_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "web_url",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The URL of the webpage to scrape and index",
              "title": "Web Url",
              "default": "https://www.usecortex.ai/"
            },
            "description": "The URL of the webpage to scrape and index"
          },
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id",
              "default": "tenant_1234"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "sub_tenant_4567",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          },
          {
            "name": "file_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional custom file ID for the scraped content. If not provided, a unique ID will be generated",
              "default": "CortexDoc1234",
              "title": "File Id"
            },
            "description": "Optional custom file ID for the scraped content. If not provided, a unique ID will be generated"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_scrape_webpage_upload_scrape_webpage_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "scrape_webpage",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/update_webpage": {
      "patch": {
        "tags": [
          "upload"
        ],
        "summary": "Update Scrape Job",
        "description": "Update web scraping content with fresh data from the source URL.\n\nThis endpoint refreshes the content for an existing web scraping job. Provide the source ID of the webpage content you want to update, and the system will re-scrape the URL to capture any changes.\n\nThe updated content gets processed asynchronously and re-indexed in your knowledge base. Use this to keep web content current when the source pages are frequently updated.",
        "operationId": "update_scrape_job_upload_update_webpage_patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "web_url",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The URL of the webpage to re-scrape",
              "title": "Web Url",
              "default": "https://www.usecortex.ai/"
            },
            "description": "The URL of the webpage to re-scrape"
          },
          {
            "name": "source_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The file ID of the existing web scraping job to update",
              "title": "Source Id",
              "default": "CortexDoc1234"
            },
            "description": "The file ID of the existing web scraping job to update"
          },
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id",
              "default": "tenant_1234"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "sub_tenant_4567",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_update_scrape_job_upload_update_webpage_patch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "update_webpage",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/delete_source": {
      "delete": {
        "tags": [
          "upload"
        ],
        "summary": "Delete Memory",
        "description": "Remove documents and content from your knowledge base.\n\nThis endpoint permanently deletes the specified sources from your knowledge base. Once deleted, the content will no longer be available for search or retrieval.\n\nUse this carefully as the action cannot be undone. The system will confirm successful deletion of each source ID you specify.",
        "operationId": "delete_memory_upload_delete_source_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteMemoryRequest",
                "description": "Request body containing the source IDs to delete and tenant information"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "delete_source",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/delete_memory": {
      "delete": {
        "tags": [
          "upload"
        ],
        "summary": "Delete Memory",
        "description": "Remove documents and content from your knowledge base.\n\nThis endpoint permanently deletes the specified sources from your knowledge base. Once deleted, the content will no longer be available for search or retrieval.\n\nUse this carefully as the action cannot be undone. The system will confirm successful deletion of each source ID you specify.",
        "operationId": "delete_memory_upload_delete_memory_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteMemoryRequest",
                "description": "Request body containing the source IDs to delete and tenant information"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "delete_memory",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/verify_processing": {
      "post": {
        "tags": [
          "upload"
        ],
        "summary": "Verifying Processing",
        "description": "Check the current processing status of your uploaded content.\n\nThis endpoint allows you to monitor the progress of documents, text, or other content you've uploaded. Simply provide the file ID to see whether processing is complete, still in progress, or if any errors occurred.\n\nUse this to determine when your content is ready for search and retrieval, or to troubleshoot any processing issues.",
        "operationId": "verifying_processing_upload_verify_processing_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The file ID to check processing status for",
              "title": "File Id",
              "default": "CortexDoc1234"
            },
            "description": "The file ID to check processing status for"
          },
          {
            "name": "tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "default": "tenant_1234",
              "title": "Tenant Id"
            },
            "description": "Unique identifier for the tenant/organization"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessingStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "verify_processing",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/document/delete": {
      "delete": {
        "tags": [
          "document"
        ],
        "summary": "Delete Memory",
        "description": "Remove documents and content from your knowledge base.\n\nThis endpoint permanently deletes the specified sources from your knowledge base. Once deleted, the content will no longer be available for search or retrieval.\n\nUse this carefully as the action cannot be undone. The system will confirm successful deletion of each source ID you specify.",
        "operationId": "delete_memory_document_delete_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteMemoryRequest",
                "description": "Request body containing the source IDs to delete and tenant information"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteSources"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-group-name": "document",
        "x-fern-sdk-method-name": "delete",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/search/retrieve": {
      "post": {
        "tags": [
          "search"
        ],
        "summary": "Search",
        "description": "Search for relevant content within your indexed sources.\n\nThis API returns the chunks related to the query you make. We use neural (embedding) search to give you the most relevant chunks. \nResults are ranked by relevance and can be customized with parameters like result limits and recency preferences.",
        "operationId": "search_search_retrieve_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SearchChunk"
                  },
                  "type": "array",
                  "title": "Response Search Search Retrieve Post"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-group-name": "search",
        "x-fern-sdk-method-name": "retrieve",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/search/full-text-search": {
      "post": {
        "tags": [
          "search"
        ],
        "summary": "Full Text Search",
        "description": "Perform full text search for exact matches within your indexed sources.\n\nUse this endpoint to find content chunks using BM25-based text matching with configurable operators.\nChoose between 'OR' and 'AND' operators to control how search terms are combined for precise text matching.",
        "operationId": "full_text_search_search_full_text_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FullTextSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SearchChunk"
                  },
                  "type": "array",
                  "title": "Response Full Text Search Search Full Text Search Post"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-group-name": "search",
        "x-fern-sdk-method-name": "full_text_search",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/embeddings/delete": {
      "delete": {
        "tags": [
          "embeddings"
        ],
        "summary": "Delete Embeddings",
        "description": "Delete embedding chunks by chunk ID.\n\nUse this to remove specific chunks from your embeddings index when they are no longer valid or should not appear in results.",
        "operationId": "delete_embeddings_embeddings_delete_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingsDeleteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingsDeleteData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-group-name": "embeddings",
        "x-fern-sdk-method-name": "delete",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/embeddings/search": {
      "post": {
        "tags": [
          "embeddings"
        ],
        "summary": "Search Embeddings",
        "description": "Find similar chunks using an embedding vector.\n\nUse this to retrieve the most similar chunk IDs to a single query embedding.\n\n\nExpected outcome\n- You receive the closest chunk IDs with optional similarity scores.",
        "operationId": "search_embeddings_embeddings_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingsSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingsSearchData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-group-name": "embeddings",
        "x-fern-sdk-method-name": "search",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/embeddings/by-chunk-ids": {
      "post": {
        "tags": [
          "embeddings"
        ],
        "summary": "Get Embeddings Based On Chunk Ids",
        "description": "Retrieve embeddings for specific chunk IDs.\n\nUse this when you already know the chunk IDs and need their corresponding embeddings.",
        "operationId": "get_embeddings_based_on_chunk_ids_embeddings_by_chunk_ids_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetEmbeddingsBasedOnChunkIdsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingsGetData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-group-name": "embeddings",
        "x-fern-sdk-method-name": "get_by_chunk_ids",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/embeddings/create_embeddings_tenant": {
      "post": {
        "tags": [
          "embeddings"
        ],
        "summary": "Create Embeddings Collection",
        "description": "Create an embeddings collection for a tenant.\n\nUse this to initialize storage so you can index and query embeddings for the tenant.",
        "operationId": "create_embeddings_collection_embeddings_create_embeddings_tenant_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id",
              "default": "tenant_1234"
            },
            "description": "Unique identifier for the tenant/organization"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingsCreateCollectionData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "embeddings",
        "x-fern-sdk-method-name": "create_collection",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/user/create_tenant": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create Tenant",
        "description": "Create a tenant for your account.\n\nUse this endpoint to initialize a tenant space you can use for ingestion, embeddings, and search. Optionally include a metadata schema to enforce consistent attributes across documents.\n\nExpected outcome\n- A tenant is created and returned with its identifier.\n- If the tenant already exists, you receive a success message with the existing identifier.",
        "operationId": "create_tenant_user_create_tenant_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Unique identifier for the tenant/organization",
              "default": "tenant_1234",
              "title": "Tenant Id"
            },
            "description": "Unique identifier for the tenant/organization"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_tenant_user_create_tenant_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantCreateData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "user",
        "x-fern-sdk-method-name": "create_tenant",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/tenant/stats": {
      "get": {
        "tags": [
          "tenant"
        ],
        "summary": "Get Tenant Stats",
        "description": "Retrieve usage stats for your tenant.\n\nUse this endpoint to check whether a tenant exists and view core metrics like total indexed objects and vector dimension. This helps you validate setup and monitor ingestion.\n\nExpected outcome\n- You receive the current object count and vector dimension for the tenant.\n- If the tenant does not exist, you get a not-found error.",
        "operationId": "get_tenant_stats_tenant_stats_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id",
              "default": "tenant_1234"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "sub_tenant_4567",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantStats"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "tenant",
        "x-fern-sdk-method-name": "stats",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/tenant/sub_tenant_ids": {
      "get": {
        "tags": [
          "tenant"
        ],
        "summary": "Get Sub Tenant Ids",
        "description": "Retrieve all sub-tenant IDs contained within a specific tenant. Fetches the sub-tenant IDs directly from the underlying data store.",
        "operationId": "get_sub_tenant_ids_tenant_sub_tenant_ids_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tenant Id",
              "default": "tenant_1234"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubTenantIdsData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "tenant",
        "x-fern-sdk-method-name": "get_sub_tenant_ids",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/tenant/delete_sub_tenant": {
      "delete": {
        "tags": [
          "tenant"
        ],
        "summary": "Delete Sub Tenant",
        "description": "Delete a sub-tenant from a given tenant.\n\nThis endpoint deletes a specific sub-tenant from the specified tenant.\nIt validates that the sub-tenant is not the primary/default sub-tenant before deletion.",
        "operationId": "delete_sub_tenant_tenant_delete_sub_tenant_delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tenant Id",
              "default": "tenant_1234"
            }
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Sub Tenant Id",
              "default": "sub_tenant_4567"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteSubTenantData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "tenant",
        "x-fern-sdk-method-name": "delete_sub_tenant",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ActualErrorResponse": {
        "properties": {
          "detail": {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        },
        "type": "object",
        "required": [
          "detail"
        ],
        "title": "ActualErrorResponse"
      },
      "AddUserMemoryRequest": {
        "properties": {
          "user_memory": {
            "type": "string",
            "title": "User Memory",
            "description": "The memory content to store for future reference"
          }
        },
        "type": "object",
        "required": [
          "user_memory"
        ],
        "title": "AddUserMemoryRequest"
      },
      "AddUserMemoryResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Indicates whether the memory addition operation was successful",
            "example": true
          },
          "user_memory_added": {
            "type": "boolean",
            "title": "User Memory Added",
            "description": "Confirms whether the memory was successfully stored in the system",
            "example": true
          },
          "memory_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Memory Id",
            "description": "Unique identifier assigned to the newly created memory",
            "example": "CortexUserMemory39243c65851949fbab283cce9085a5f61757340796"
          }
        },
        "type": "object",
        "required": [
          "success",
          "user_memory_added"
        ],
        "title": "AddUserMemoryResponse",
        "description": "Response model for adding a new user memory."
      },
      "AppSourcesUploadData": {
        "properties": {
          "uploaded": {
            "items": {
              "$ref": "#/components/schemas/FileUploadResult"
            },
            "type": "array",
            "title": "Uploaded",
            "description": "List of successfully uploaded app source for indexing"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Status message indicating app sources upload scheduled"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "uploaded",
          "message"
        ],
        "title": "AppSourcesUploadData"
      },
      "AttachmentModel": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier for the attachment.",
            "default": ""
          },
          "url": {
            "type": "string",
            "title": "Url",
            "description": "Public or internal URL referencing the attachment resource.",
            "default": ""
          },
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Human-readable title or filename of the attachment.",
            "default": ""
          },
          "content_type": {
            "type": "string",
            "title": "Content Type",
            "description": "MIME type of the attachment (e.g., application/pdf).",
            "default": ""
          },
          "content_url": {
            "type": "string",
            "title": "Content Url",
            "description": "Direct URL for content retrieval when different from the reference URL.",
            "default": ""
          },
          "misc": {
            "additionalProperties": true,
            "type": "object",
            "title": "Misc",
            "description": "Additional attachment attributes defined by the tenant (free-form)."
          },
          "content": {
            "$ref": "#/components/schemas/ContentModel",
            "description": "Structured content payload for the attachment when available."
          }
        },
        "type": "object",
        "title": "AttachmentModel"
      },
      "BM25OperatorType": {
        "type": "string",
        "enum": [
          "or",
          "and"
        ],
        "title": "BM25OperatorType"
      },
      "BatchUploadData": {
        "properties": {
          "uploaded": {
            "items": {
              "$ref": "#/components/schemas/FileUploadResult"
            },
            "type": "array",
            "title": "Uploaded",
            "description": "List of successfully uploaded files for processing"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Status message indicating batch document parsing scheduled"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "uploaded",
          "message"
        ],
        "title": "BatchUploadData"
      },
      "Body_batch_update_upload_batch_update_patch": {
        "properties": {
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files",
            "description": "The document file to upload (e.g., PDF, DOCX, TXT)"
          },
          "source_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Ids",
            "description": "List of source IDs corresponding to the files being updated"
          },
          "tenant_metadata": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Metadata",
            "description": "JSON string containing tenant-level document metadata (e.g., department, compliance_tag)\n\nExample: > \"{\"department\":\"Finance\",\"compliance_tag\":\"GDPR\"}\"\n\n"
          },
          "document_metadata": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Metadata",
            "description": "JSON string containing document-specific metadata (e.g., title, author, file_id). If file_id is not provided, the system will generate an ID automatically.\n\nExample: > \"{\"title\":\"Q1 Report.pdf\",\"author\":\"Alice Smith\",\"file_id\":\"custom_file_123\"}\"\n\n\n"
          }
        },
        "type": "object",
        "required": [
          "files"
        ],
        "title": "Body_batch_update_upload_batch_update_patch"
      },
      "Body_batch_upload_upload_batch_upload_post": {
        "properties": {
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files",
            "description": "The document file to upload (e.g., PDF, DOCX, TXT)"
          },
          "tenant_metadata": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Metadata",
            "description": "JSON string containing tenant-level document metadata (e.g., department, compliance_tag)\n\nExample: > \"{\"department\":\"Finance\",\"compliance_tag\":\"GDPR\"}\"\n\n"
          },
          "document_metadata": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Metadata",
            "description": "JSON string containing document-specific metadata (e.g., title, author, file_id). If file_id is not provided, the system will generate an ID automatically.\n\nExample: > \"{\"title\":\"Q1 Report.pdf\",\"author\":\"Alice Smith\",\"file_id\":\"custom_file_123\"}\"\n\n\n"
          }
        },
        "type": "object",
        "required": [
          "files"
        ],
        "title": "Body_batch_upload_upload_batch_upload_post"
      },
      "Body_create_tenant_user_create_tenant_post": {
        "properties": {
          "tenant_metadata_schema": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Metadata Schema"
          }
        },
        "type": "object",
        "title": "Body_create_tenant_user_create_tenant_post"
      },
      "Body_scrape_webpage_upload_scrape_webpage_post": {
        "properties": {},
        "type": "object",
        "title": "Body_scrape_webpage_upload_scrape_webpage_post"
      },
      "Body_update_file_upload_update_document_patch": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File",
            "description": "The document file to upload (e.g., PDF, DOCX, TXT)"
          },
          "tenant_metadata": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Metadata",
            "description": "JSON string containing tenant-level document metadata (e.g., department, compliance_tag)\n\nExample: > \"{\"department\":\"Finance\",\"compliance_tag\":\"GDPR\"}\"\n\n"
          },
          "document_metadata": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Metadata",
            "description": "JSON string containing document-specific metadata (e.g., title, author, file_id). If file_id is not provided, the system will generate an ID automatically.\n\nExample: > \"{\"title\":\"Q1 Report.pdf\",\"author\":\"Alice Smith\",\"file_id\":\"custom_file_123\"}\"\n\n\n"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_update_file_upload_update_document_patch"
      },
      "Body_update_scrape_job_upload_update_webpage_patch": {
        "properties": {},
        "type": "object",
        "title": "Body_update_scrape_job_upload_update_webpage_patch"
      },
      "Body_upload_files_upload_upload_document_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File",
            "description": "The document file to upload (e.g., PDF, DOCX, TXT)"
          },
          "tenant_metadata": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Metadata",
            "description": "JSON string containing tenant-level document metadata (e.g., department, compliance_tag)\n\nExample: > \"{\"department\":\"Finance\",\"compliance_tag\":\"GDPR\"}\"\n\n"
          },
          "document_metadata": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Metadata",
            "description": "JSON string containing document-specific metadata (e.g., title, author, file_id). If file_id is not provided, the system will generate an ID automatically.\n\nExample: > \"{\"title\":\"Q1 Report.pdf\",\"author\":\"Alice Smith\",\"file_id\":\"custom_file_123\"}\"\n\n\n"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_upload_files_upload_upload_document_post"
      },
      "ContentModel": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text",
            "description": "Plain text content extracted or provided for indexing.",
            "default": ""
          },
          "html_base64": {
            "type": "string",
            "title": "Html Base64",
            "description": "Base64-encoded HTML content preserving structure and formatting.",
            "default": ""
          },
          "csv_base64": {
            "type": "string",
            "title": "Csv Base64",
            "description": "Base64-encoded CSV data for tabular content ingestion.",
            "default": ""
          },
          "markdown": {
            "type": "string",
            "title": "Markdown",
            "description": "Raw Markdown content to be indexed as rich text.",
            "default": ""
          },
          "files": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Files",
            "description": "List of file descriptors associated with the source (e.g., filenames, sizes)."
          },
          "layout": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Layout",
            "description": "Optional layout metadata such as sections or blocks to guide chunking."
          }
        },
        "type": "object",
        "title": "ContentModel"
      },
      "DeleteMemoryRequest": {
        "properties": {
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id",
            "description": "Unique identifier for the tenant/organization"
          },
          "source_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Source Ids",
            "description": "List of source IDs to delete"
          },
          "sub_tenant_id": {
            "type": "string",
            "title": "Sub Tenant Id",
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "tenant_id",
          "source_ids"
        ],
        "title": "DeleteMemoryRequest"
      },
      "DeleteSources": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": "Sources deleted successfully"
          }
        },
        "type": "object",
        "title": "DeleteSources"
      },
      "DeleteSubTenantData": {
        "properties": {
          "status": {
            "type": "string",
            "minLength": 1,
            "title": "Status",
            "description": "The status of the deletion operation.",
            "example": "deleted"
          },
          "tenant_id": {
            "type": "string",
            "minLength": 1,
            "title": "Tenant Id",
            "description": "The tenant ID from which the sub-tenant was deleted.",
            "example": "tenant_abcd"
          },
          "sub_tenant_id": {
            "type": "string",
            "minLength": 1,
            "title": "Sub Tenant Id",
            "description": "The ID of the sub-tenant that was deleted.",
            "example": "user_12345"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Indicates whether the sub-tenant deletion was successful.",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Response message describing the operation result.",
            "default": "Sub-tenant deleted successfully"
          }
        },
        "type": "object",
        "required": [
          "status",
          "tenant_id",
          "sub_tenant_id"
        ],
        "title": "DeleteSubTenantData"
      },
      "DeleteUserMemoryResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Indicates whether the memory deletion operation was successful",
            "example": true
          },
          "user_memory_deleted": {
            "type": "boolean",
            "title": "User Memory Deleted",
            "description": "Confirms whether the specific memory was successfully deleted",
            "example": true
          }
        },
        "type": "object",
        "required": [
          "success",
          "user_memory_deleted"
        ],
        "title": "DeleteUserMemoryResponse",
        "description": "Response model for deleting a user memory."
      },
      "EmbeddingsCreateCollectionData": {
        "properties": {
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id",
            "description": "Identifier for the tenant/organization"
          },
          "sub_tenant_id": {
            "type": "string",
            "title": "Sub Tenant Id",
            "description": "Identifier for the sub-tenant within the tenant"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Indicates whether the embeddings tenant creation completed successfully",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Status message about the tenant creation operation",
            "default": "Embeddings collection created successfully"
          }
        },
        "type": "object",
        "required": [
          "tenant_id",
          "sub_tenant_id"
        ],
        "title": "EmbeddingsCreateCollectionData"
      },
      "EmbeddingsDeleteData": {
        "properties": {
          "total_deleted": {
            "type": "integer",
            "title": "Total Deleted",
            "description": "Total number of embeddings that were successfully deleted"
          },
          "status": {
            "additionalProperties": {
              "type": "boolean"
            },
            "type": "object",
            "title": "Status",
            "description": "Dictionary mapping chunk IDs to their deletion status (true if deleted successfully). Example: {'chunk_1234': true}"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Indicates whether the embeddings deletion operation completed successfully",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Status message about the deletion operation",
            "default": "Embeddings deleted successfully"
          }
        },
        "type": "object",
        "required": [
          "total_deleted",
          "status"
        ],
        "title": "EmbeddingsDeleteData"
      },
      "EmbeddingsDeleteRequest": {
        "properties": {
          "chunk_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Chunk Ids",
            "description": "The chunk IDs of the source you want to delete"
          },
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id",
            "description": "Unique identifier for the tenant/organization"
          },
          "sub_tenant_id": {
            "type": "string",
            "title": "Sub Tenant Id",
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "chunk_ids",
          "tenant_id"
        ],
        "title": "EmbeddingsDeleteRequest"
      },
      "EmbeddingsGetData": {
        "properties": {
          "embeddings": {
            "additionalProperties": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Embeddings",
            "description": "Dictionary mapping chunk IDs to their embedding vectors (lists of float values)"
          },
          "not_found_chunk_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Not Found Chunk Ids",
            "description": "List of chunk IDs that were not found in the embeddings collection"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Indicates whether the embeddings retrieval operation completed successfully",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Status message about the retrieval operation",
            "default": "Embeddings retrieved successfully"
          }
        },
        "type": "object",
        "required": [
          "embeddings",
          "not_found_chunk_ids"
        ],
        "title": "EmbeddingsGetData"
      },
      "EmbeddingsSearchData": {
        "properties": {
          "chunk_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Chunk Ids",
            "description": "List of chunk IDs that match the search query"
          },
          "scores": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Scores",
            "description": "Similarity scores for each matching chunk (higher is more similar)"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Indicates whether the embeddings search operation completed successfully",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Status message about the search operation",
            "default": "Embeddings search completed successfully"
          }
        },
        "type": "object",
        "required": [
          "chunk_ids",
          "scores"
        ],
        "title": "EmbeddingsSearchData"
      },
      "EmbeddingsSearchRequest": {
        "properties": {
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id",
            "description": "Unique identifier for the tenant/organization"
          },
          "embeddings": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Embeddings",
            "description": "The embedding vector for search"
          },
          "sub_tenant_id": {
            "type": "string",
            "title": "Sub Tenant Id",
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
            "default": ""
          },
          "max_chunks": {
            "type": "integer",
            "title": "Max Chunks",
            "default": 10
          }
        },
        "type": "object",
        "required": [
          "tenant_id"
        ],
        "title": "EmbeddingsSearchRequest"
      },
      "EmbeddingsUpdateRequest": {
        "properties": {
          "embeddings": {
            "additionalProperties": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Embeddings",
            "description": "The embeddings of source you want to index"
          }
        },
        "type": "object",
        "title": "EmbeddingsUpdateRequest"
      },
      "EmbeddingsUploadRequest": {
        "properties": {
          "embeddings": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Embeddings",
            "description": "The embeddings of source you want to index"
          },
          "file_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Id",
            "description": "The Source ID of the target source you want to index",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "embeddings"
        ],
        "title": "EmbeddingsUploadRequest"
      },
      "ErrorResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "default": false
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": "Error occurred"
          },
          "error_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Code"
          }
        },
        "type": "object",
        "title": "ErrorResponse"
      },
      "ExtendedContext": {
        "properties": {
          "relations": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/RelatedChunk"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Relations",
            "default": []
          }
        },
        "type": "object",
        "title": "ExtendedContext"
      },
      "FetchContentData": {
        "properties": {
          "file_id": {
            "type": "string",
            "title": "File Id",
            "description": "Unique identifier for the file being fetched"
          },
          "file_content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Content",
            "description": "Content of the fetched file",
            "default": ""
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Indicates whether the fetch operation completed successfully",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Status message about the fetch operation",
            "default": "Content fetched successfully"
          }
        },
        "type": "object",
        "required": [
          "file_id"
        ],
        "title": "FetchContentData"
      },
      "FetchContentRequest": {
        "properties": {
          "file_id": {
            "type": "string",
            "title": "File Id",
            "description": "Unique identifier for the file to fetch"
          },
          "file_type": {
            "type": "string",
            "title": "File Type",
            "description": "Type of file (e.g., 'app', 'file', or other)"
          },
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id",
            "description": "Tenant identifier for multi-tenancy"
          },
          "return_content": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Return Content",
            "description": "Whether to return the file content along with the URL",
            "default": true
          },
          "sub_tenant_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sub Tenant Id",
            "description": "Sub-tenant identifier, defaults to tenant_id if not provided",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "file_id",
          "file_type",
          "tenant_id"
        ],
        "title": "FetchContentRequest"
      },
      "FileUploadResult": {
        "properties": {
          "file_id": {
            "type": "string",
            "title": "File Id",
            "description": "Unique identifier for the file being processed"
          },
          "filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filename",
            "description": "Name of the uploaded file, if provided"
          }
        },
        "type": "object",
        "required": [
          "file_id"
        ],
        "title": "FileUploadResult"
      },
      "FullTextSearchRequest": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query",
            "description": "Search terms to find in your content"
          },
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id",
            "description": "Unique identifier for the tenant/organization"
          },
          "sub_tenant_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sub Tenant Id",
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
            "default": ""
          },
          "operator": {
            "$ref": "#/components/schemas/BM25OperatorType",
            "description": "How to combine search terms (OR or AND)",
            "default": "or"
          },
          "max_chunks": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Chunks",
            "description": "Maximum number of results to return",
            "default": 25
          }
        },
        "type": "object",
        "required": [
          "query",
          "tenant_id"
        ],
        "title": "FullTextSearchRequest"
      },
      "GenerateUserMemoryRequest": {
        "properties": {
          "user_message": {
            "type": "string",
            "title": "User Message",
            "description": "Your message for AI memory generation"
          },
          "user_name": {
            "type": "string",
            "title": "User Name",
            "description": "Your name to personalize the generated memories"
          }
        },
        "type": "object",
        "required": [
          "user_message",
          "user_name"
        ],
        "title": "GenerateUserMemoryRequest"
      },
      "GenerateUserMemoryResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Indicates whether the memory generation operation was successful",
            "example": true
          },
          "generated_user_memories": {
            "items": {
              "$ref": "#/components/schemas/UserMemory"
            },
            "type": "array",
            "title": "Generated User Memories",
            "description": "Array of AI-generated memories based on your query and user context"
          }
        },
        "type": "object",
        "required": [
          "success"
        ],
        "title": "GenerateUserMemoryResponse",
        "description": "Response model for AI-generated user memories."
      },
      "GetEmbeddingsBasedOnChunkIdsRequest": {
        "properties": {
          "chunk_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Chunk Ids",
            "description": "The chunk IDs of the source you want to get embeddings for"
          },
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id",
            "description": "Unique identifier for the tenant/organization"
          },
          "sub_tenant_id": {
            "type": "string",
            "title": "Sub Tenant Id",
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "chunk_ids",
          "tenant_id"
        ],
        "title": "GetEmbeddingsBasedOnChunkIdsRequest"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "ListSourcesResponse": {
        "properties": {
          "sources": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Source"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "array",
            "title": "Sources",
            "description": "List of source documents retrieved"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Indicates whether the request was successful",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Response message describing the operation result",
            "default": "Sources retrieved successfully"
          }
        },
        "type": "object",
        "required": [
          "sources"
        ],
        "title": "ListSourcesResponse"
      },
      "ListUserMemoriesResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Indicates whether the memory listing operation was successful",
            "example": true
          },
          "user_memories": {
            "items": {
              "$ref": "#/components/schemas/UserMemory"
            },
            "type": "array",
            "title": "User Memories",
            "description": "Array of all user memories associated with your tenant"
          }
        },
        "type": "object",
        "required": [
          "success"
        ],
        "title": "ListUserMemoriesResponse",
        "description": "Response model for listing all user memories."
      },
      "MarkdownUploadRequest": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content",
            "description": "The text or markdown content to upload"
          },
          "tenant_metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Metadata",
            "description": "JSON string containing tenant-level document metadata (e.g., department, compliance_tag)\n\nExample: > \"{\"department\":\"Finance\",\"compliance_tag\":\"GDPR\"}\"\n\n"
          },
          "document_metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Metadata",
            "description": "JSON string containing document-specific metadata (e.g., title, author, file_id). If file_id is not provided, the system will generate an ID automatically.\n\nExample: > \"{\"title\":\"Q1 Report.pdf\",\"author\":\"Alice Smith\",\"file_id\":\"custom_file_123\"}\"\n\n\n"
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "MarkdownUploadRequest"
      },
      "ProcessingStatus": {
        "properties": {
          "file_id": {
            "type": "string",
            "title": "File Id",
            "description": "Identifier for the file whose status is being retrieved"
          },
          "indexing_status": {
            "type": "string",
            "title": "Indexing Status",
            "description": "Current status of the file. Possible values are 'queued', 'processing', 'completed', 'failed'"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Detailed status message about the processing operation",
            "default": "Processing status retrieved successfully"
          }
        },
        "type": "object",
        "required": [
          "file_id",
          "indexing_status"
        ],
        "title": "ProcessingStatus"
      },
      "QnARequest": {
        "properties": {
          "question": {
            "type": "string",
            "title": "Question",
            "description": "The question to be answered"
          },
          "session_id": {
            "type": "string",
            "title": "Session Id",
            "description": "Unique identifier for the conversation session. Keep it same when the current question refers to a previous answer or question"
          },
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id",
            "description": "Identifier for the tenant/organization"
          },
          "context_list": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Context List",
            "description": "List of context strings to provide additional information"
          },
          "search_modes": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Search Modes",
            "description": "List of search modes to use for finding relevant information"
          },
          "sub_tenant_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sub Tenant Id",
            "description": "Identifier for sub-tenant within the tenant",
            "default": ""
          },
          "highlight_chunks": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Highlight Chunks",
            "description": "Whether to return text chunks in the response along with final LLM generated answer",
            "default": false
          },
          "stream": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stream",
            "description": "Whether to stream the response",
            "default": false
          },
          "search_alpha": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Search Alpha",
            "description": "Closer to 0.0 means a exact keyword search will be performed, closer to 1.0 means semantics of the search will be considered. In most cases, you wont have to toggle it yourself.",
            "default": 0.8
          },
          "recency_bias": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recency Bias",
            "description": "Bias towards more recent information (0.0 to 1.0)",
            "default": 0.2
          },
          "ai_generation": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ai Generation",
            "description": "Whether to use AI for generating responses",
            "default": true
          },
          "top_n": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Top N",
            "description": "Number of top results to return"
          },
          "user_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Name",
            "description": "Name of the user making the request. This helps LLM to know the user's name if semantics around the username are involved in query. Its generally a good practice to include it possible.",
            "default": ""
          },
          "user_instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Instructions",
            "description": "Custom instructions for the AI response to add to our proprietary prompt. This can be used to provide additional context or instructions for the LLM to follow so that the answers are tailored towards your application style",
            "default": ""
          },
          "multi_step_reasoning": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Multi Step Reasoning",
            "description": "Enable advanced multi-step reasoning for complex queries. When enabled, the AI will automatically break down complex questions into multiple research steps to provide more comprehensive and accurate answers.",
            "default": true
          },
          "auto_agent_routing": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Auto Agent Routing",
            "description": "Enable intelligent agent routing to automatically select the most suitable AI agent for your specific query type. Different agents are optimized for various use cases like social media, code, conversations, general knowledge, etc.",
            "default": true
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Additional metadata for the request"
          }
        },
        "type": "object",
        "required": [
          "question",
          "session_id",
          "tenant_id"
        ],
        "title": "QnARequest"
      },
      "RelatedChunk": {
        "properties": {
          "source_id": {
            "type": "string",
            "title": "Source Id"
          },
          "chunk_uuid": {
            "type": "string",
            "title": "Chunk Uuid"
          },
          "chunk_content": {
            "type": "string",
            "title": "Chunk Content"
          },
          "source_title": {
            "type": "string",
            "title": "Source Title",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "source_id",
          "chunk_uuid",
          "chunk_content"
        ],
        "title": "RelatedChunk"
      },
      "Relations": {
        "properties": {
          "cortex_source_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cortex Source Ids",
            "description": "List of cortex source IDs to directly relate with"
          },
          "auto_discovery": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Auto Discovery",
            "description": "Key value pairs to allow cortex to automatically discover relations"
          }
        },
        "type": "object",
        "title": "Relations"
      },
      "RetrieveUserMemoryRequest": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query",
            "description": "Search query to find relevant user memories"
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "RetrieveUserMemoryRequest"
      },
      "RetrieveUserMemoryResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Indicates whether the memory retrieval operation was successful",
            "example": true
          },
          "retrieved_user_memories": {
            "items": {
              "$ref": "#/components/schemas/UserMemory"
            },
            "type": "array",
            "title": "Retrieved User Memories",
            "description": "Array of user memories ranked by relevance to your search query"
          }
        },
        "type": "object",
        "required": [
          "success"
        ],
        "title": "RetrieveUserMemoryResponse",
        "description": "Response model for retrieving user memories through semantic search."
      },
      "SearchChunk": {
        "properties": {
          "chunk_uuid": {
            "type": "string",
            "title": "Chunk Uuid",
            "description": "Unique identifier for this content chunk",
            "example": "a1b2c3d4-e5f6-7890-1234-567890abcdef"
          },
          "source_id": {
            "type": "string",
            "title": "Source Id",
            "description": "Unique identifier for the source document",
            "example": "doc_12345"
          },
          "chunk_content": {
            "type": "string",
            "title": "Chunk Content",
            "description": "The actual text content of this chunk",
            "example": "This is a chunk of text from the source document."
          },
          "source_type": {
            "type": "string",
            "title": "Source Type",
            "description": "Type of the source document (file, webpage, etc.)",
            "default": "",
            "example": "file"
          },
          "source_upload_time": {
            "type": "string",
            "title": "Source Upload Time",
            "description": "When the source document was originally uploaded",
            "default": "",
            "example": "2023-10-27T10:00:00Z"
          },
          "source_title": {
            "type": "string",
            "title": "Source Title",
            "description": "Title or name of the source document",
            "default": "",
            "example": "Project Phoenix Overview"
          },
          "source_last_updated_time": {
            "type": "string",
            "title": "Source Last Updated Time",
            "description": "When the source document was last modified",
            "default": "",
            "example": "2023-10-27T12:30:00Z"
          },
          "layout": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Layout",
            "description": "Layout of the chunk in original document. You will generally receive a stringified dict with 2 keys, `offsets` and `page`(optional). Offsets will have `document_level_start_index` and `page_level_start_index`(optional)",
            "example": "{\"offsets\": {\"document_level_start_index\": 1024, \"page_level_start_index\": 50}, \"page\": 2}"
          },
          "relevancy_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Relevancy Score",
            "description": "Score indicating how relevant this chunk is to your search query, with higher values indicating better matches"
          },
          "document_metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Metadata",
            "description": "Metadata extracted from the source document",
            "example": {
              "author": "John Doe",
              "category": "Internal"
            }
          },
          "tenant_metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Metadata",
            "description": "Custom metadata associated with your tenant",
            "example": {
              "department": "R&D"
            }
          }
        },
        "type": "object",
        "required": [
          "chunk_uuid",
          "source_id",
          "chunk_content"
        ],
        "title": "SearchChunk"
      },
      "SearchRequest": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query",
            "description": "Search terms to find relevant content"
          },
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id",
            "description": "Unique identifier for the tenant/organization"
          },
          "sub_tenant_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sub Tenant Id",
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
            "default": ""
          },
          "max_chunks": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Chunks",
            "description": "Maximum number of results to return"
          },
          "alpha": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Alpha",
            "description": "Search ranking algorithm parameter (0.0-1.0 or 'auto')",
            "default": 0.8
          },
          "recency_bias": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recency Bias",
            "description": "Preference for newer content (0.0 = no bias, 1.0 = strong recency preference)",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "query",
          "tenant_id"
        ],
        "title": "SearchRequest"
      },
      "SingleUploadData": {
        "properties": {
          "file_id": {
            "type": "string",
            "title": "File Id",
            "description": "Unique identifier for the file being processed"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Status message indicating document parsing scheduled or update completed"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "file_id",
          "message"
        ],
        "title": "SingleUploadData"
      },
      "Source": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier for the source document",
            "example": "doc_67890"
          },
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Display title of the source document",
            "example": "Q3 Financial Report"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of content (document, file, text, etc.)",
            "example": "document"
          },
          "timestamp": {
            "type": "string",
            "title": "Timestamp",
            "description": "When the source was originally created or uploaded",
            "example": "2023-09-30T15:00:00Z"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Brief summary or description of the source content",
            "default": "",
            "example": "Financial report for the third quarter."
          },
          "document_metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Document Metadata",
            "description": "Additional metadata specific to the document",
            "example": {
              "quarter": 3,
              "year": 2023
            }
          },
          "tenant_metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Tenant Metadata",
            "description": "Metadata related to the tenant and organizational context",
            "example": {
              "confidentiality": "high"
            }
          }
        },
        "type": "object",
        "required": [
          "id",
          "title",
          "type",
          "timestamp"
        ],
        "title": "Source"
      },
      "SourceBodyParams": {
        "properties": {
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id"
          },
          "source_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Source Ids"
          }
        },
        "type": "object",
        "required": [
          "tenant_id",
          "source_ids"
        ],
        "title": "SourceBodyParams"
      },
      "SourceModel": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Stable, unique identifier for the source. If omitted, one may be generated upstream.",
            "default": ""
          },
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Short human-readable title for the source.",
            "default": ""
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "High-level category of the source (e.g., document, email, ticket).",
            "default": ""
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Optional long-form description providing additional context.",
            "default": ""
          },
          "note": {
            "type": "string",
            "title": "Note",
            "description": "Free-form notes for internal use or ingestion hints.",
            "default": ""
          },
          "url": {
            "type": "string",
            "title": "Url",
            "description": "Canonical URL or reference link associated with the source.",
            "default": ""
          },
          "timestamp": {
            "type": "string",
            "title": "Timestamp",
            "description": "Creation or last-updated timestamp of the source in ISO-8601 format.",
            "default": ""
          },
          "content": {
            "$ref": "#/components/schemas/ContentModel",
            "description": "Primary content payload used for indexing and retrieval."
          },
          "tenant_metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Tenant Metadata",
            "description": "JSON string containing tenant-level document metadata (e.g., department, compliance_tag)\n\nExample: > \"{\"department\":\"Finance\",\"compliance_tag\":\"GDPR\"}\"\n\n"
          },
          "document_metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Document Metadata",
            "description": "JSON string containing document-specific metadata (e.g., title, author, file_id). If file_id is not provided, the system will generate an ID automatically.\n\nExample: > \"{\"title\":\"Q1 Report.pdf\",\"author\":\"Alice Smith\",\"file_id\":\"custom_file_123\"}\"\n\n\n"
          },
          "meta": {
            "additionalProperties": true,
            "type": "object",
            "title": "Meta",
            "description": "System-provided attributes (e.g., app_name, local file size) not intended for search filtering."
          },
          "attachments": {
            "items": {
              "$ref": "#/components/schemas/AttachmentModel"
            },
            "type": "array",
            "title": "Attachments",
            "description": "Attachments related to the source such as images, PDFs, or supplemental files."
          }
        },
        "type": "object",
        "title": "SourceModel"
      },
      "SubTenantIdsData": {
        "properties": {
          "tenant_id": {
            "type": "string",
            "minLength": 1,
            "title": "Tenant Id",
            "description": "The tenant ID that was queried",
            "example": "tenant_abcd"
          },
          "sub_tenant_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Sub Tenant Ids",
            "description": "Array of all sub-tenant IDs within the tenant",
            "example": [
              "default",
              "engineering",
              "sales",
              "marketing",
              "hr",
              "user_12345",
              "user_67890",
              "project_alpha"
            ]
          },
          "count": {
            "type": "integer",
            "minimum": 0,
            "title": "Count",
            "description": "Total number of sub-tenants found",
            "example": 8
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Indicates whether the sub-tenant retrieval was successful",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Response message describing the operation result",
            "default": "Sub-tenant IDs fetched successfully"
          }
        },
        "type": "object",
        "required": [
          "tenant_id",
          "sub_tenant_ids",
          "count"
        ],
        "title": "SubTenantIdsData"
      },
      "TenantCreateData": {
        "properties": {
          "status": {
            "type": "string",
            "minLength": 1,
            "title": "Status",
            "description": "Current status of the tenant creation process",
            "example": "created"
          },
          "tenant_id": {
            "type": "string",
            "minLength": 1,
            "title": "Tenant Id",
            "description": "Unique identifier assigned to the new tenant",
            "example": "tenant_abcd"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Indicates whether the tenant creation was successful",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Response message describing the creation result",
            "default": "Tenant created successfully"
          }
        },
        "type": "object",
        "required": [
          "status",
          "tenant_id"
        ],
        "title": "TenantCreateData"
      },
      "TenantStats": {
        "properties": {
          "object_count": {
            "type": "integer",
            "minimum": 0,
            "title": "Object Count",
            "description": "Total number of objects stored for this tenant",
            "example": 1500
          },
          "tenant_name": {
            "type": "string",
            "minLength": 1,
            "title": "Tenant Name",
            "description": "Name identifier for the tenant",
            "example": "tenant_abcd"
          },
          "vector_dimension": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vector Dimension",
            "description": "Dimensions of the vector embeddings used for this tenant. Null when the tenant is empty.",
            "example": 768
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Indicates whether the stats retrieval was successful",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Response message describing the operation result",
            "default": "Tenant stats retrieved successfully"
          }
        },
        "type": "object",
        "required": [
          "object_count",
          "tenant_name"
        ],
        "title": "TenantStats"
      },
      "UserMemory": {
        "properties": {
          "memory_id": {
            "type": "string",
            "title": "Memory Id",
            "description": "Unique identifier for the user memory",
            "example": "CortexUserMemory39243c65851949fbab283cce9085a5f61757340796"
          },
          "memory_content": {
            "type": "string",
            "title": "Memory Content",
            "description": "The actual memory content text that was stored",
            "example": "User prefers dark mode interface and uses keyboard shortcuts frequently"
          }
        },
        "type": "object",
        "required": [
          "memory_id",
          "memory_content"
        ],
        "title": "UserMemory",
        "description": "Represents a user memory stored in the system."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}