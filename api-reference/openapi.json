{
  "openapi": "3.1.0",
  "info": {
    "title": "Cortex SDK API",
    "description": "REST API wrapper around the Cortex Python SDK (Findr Integration)",
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "https://api.usecortex.ai",
      "description": "Production",
      "x-fern-server-name": "cortex-prod"
    }
  ],
  "paths": {
    "/search/qna": {
      "post": {
        "tags": [
          "search"
        ],
        "summary": "Qna",
        "description": "Ask a question to your uploaded knowledge base and let Cortex AI answer it.",
        "operationId": "qna_search_qna_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QnARequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "QnA response generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "default": true
                    },
                    "message": {
                      "type": "string",
                      "default": "QnA response generated successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-group-name": "search",
        "x-fern-sdk-method-name": "qna",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/list/sources": {
      "get": {
        "tags": [
          "list"
        ],
        "summary": "Get Sources",
        "description": "Retrieve all sources for a specific tenant.\n\nUse this endpoint to fetch a complete list of all sources associated with your tenant. This includes documents, files, and other content you've uploaded for processing.\n\nYou can optionally specify a sub-tenant to narrow down the results to sources within that specific sub-tenant scope.",
        "operationId": "get_sources_list_sources_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSourcesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "sources",
        "x-fern-sdk-method-name": "get_all",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/list/sources_by_id": {
      "post": {
        "tags": [
          "list"
        ],
        "summary": "Get Source By Id",
        "description": "Retrieve specific sources by their IDs.\n\nUse this endpoint to fetch one or more sources by providing their unique identifiers. This is useful when you need detailed information about specific documents or content you've previously uploaded.\n\nProvide the source IDs in the request body along with your tenant information to get the exact sources you need.",
        "operationId": "get_source_by_id_list_sources_by_id_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceBodyParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSourcesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-group-name": "sources",
        "x-fern-sdk-method-name": "get_by_ids",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/list/sub_tenant_ids": {
      "get": {
        "tags": [
          "list"
        ],
        "summary": "Get Sub Tenant Ids",
        "description": "Retrieve all sub-tenant IDs for a specific tenant.\n\nUse this endpoint to get a list of all sub-tenant identifiers associated with your main tenant. This helps you understand the organizational structure of your data and manage access controls effectively.\n\nThe response includes the collection name, list of sub-tenant IDs, and a count of total sub-tenants for easy reference.",
        "operationId": "get_sub_tenant_ids_list_sub_tenant_ids_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id"
            },
            "description": "Unique identifier for the tenant/organization"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubTenantIdsData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "sources",
        "x-fern-sdk-method-name": "get_sub_tenant_ids",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/user_memory/list_user_memories": {
      "get": {
        "tags": [
          "user_memory"
        ],
        "summary": "List User Memories",
        "operationId": "list_user_memories_user_memory_list_user_memories_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tenant Id"
            }
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Sub Tenant Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User memories retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "default": true
                    },
                    "message": {
                      "type": "string",
                      "default": "User memories retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "user_memory",
        "x-fern-sdk-method-name": "list_user_memories",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/user_memory/delete_user_memory": {
      "delete": {
        "tags": [
          "user_memory"
        ],
        "summary": "Delete User Memory",
        "operationId": "delete_user_memory_user_memory_delete_user_memory_delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tenant Id"
            }
          },
          {
            "name": "memory_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Memory Id"
            }
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Sub Tenant Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Memory deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "default": true
                    },
                    "message": {
                      "type": "string",
                      "default": "Memory deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "user_memory",
        "x-fern-sdk-method-name": "delete_user_memory",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/user_memory/retrieve_user_memory": {
      "get": {
        "tags": [
          "user_memory"
        ],
        "summary": "Retrieve User Memory",
        "operationId": "retrieve_user_memory_user_memory_retrieve_user_memory_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tenant Id"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Query"
            }
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Sub Tenant Id"
            }
          },
          {
            "name": "max_count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 5,
              "title": "Max Count"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User memory retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "default": true
                    },
                    "message": {
                      "type": "string",
                      "default": "User memory retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "user_memory",
        "x-fern-sdk-method-name": "retrieve_user_memory",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/user_memory/generate_user_memory": {
      "post": {
        "tags": [
          "user_memory"
        ],
        "summary": "Generate User Memory",
        "operationId": "generate_user_memory_user_memory_generate_user_memory_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tenant Id"
            }
          },
          {
            "name": "user_query",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Query"
            }
          },
          {
            "name": "user_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Name"
            }
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Sub Tenant Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User memory generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "default": true
                    },
                    "message": {
                      "type": "string",
                      "default": "User memory generated successfully"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "user_memory",
        "x-fern-sdk-method-name": "generate_user_memory",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/user_memory/add_user_memory": {
      "post": {
        "tags": [
          "user_memory"
        ],
        "summary": "Add User Memory",
        "operationId": "add_user_memory_user_memory_add_user_memory_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tenant Id"
            }
          },
          {
            "name": "user_memory",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Memory"
            }
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Sub Tenant Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User memory added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "default": true
                    },
                    "message": {
                      "type": "string",
                      "default": "User memory added successfully"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "user_memory",
        "x-fern-sdk-method-name": "add_user_memory",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/fetch/fetch_content": {
      "post": {
        "tags": [
          "fetch"
        ],
        "summary": "Fetch Content",
        "operationId": "fetch_content_fetch_fetch_content_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FetchContentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchContentData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-group-name": "fetch",
        "x-fern-sdk-method-name": "fetch_content",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/batch_upload": {
      "post": {
        "tags": [
          "upload"
        ],
        "summary": "Batch Upload",
        "description": "Upload multiple documents simultaneously for efficient bulk processing.\n\nThis endpoint allows you to upload several files at once, which is ideal for large document collections or periodic data imports. Each file gets processed asynchronously, and you can track the progress of individual files using their returned file IDs.\n\nThe system automatically handles file parsing, content extraction, and indexing across all uploaded documents. You'll receive confirmation once all files are queued for processing.",
        "operationId": "batch_upload_upload_batch_upload_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_batch_upload_upload_batch_upload_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "batch_upload",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/batch_update": {
      "patch": {
        "tags": [
          "upload"
        ],
        "summary": "Batch Update",
        "description": "Update multiple existing documents with new content and metadata.\n\nUse this endpoint when you need to replace or modify several documents that are already in your knowledge base. Each file must correspond to an existing source ID, ensuring that updates are applied to the correct documents.\n\nThe system processes updates asynchronously, allowing you to continue working while your documents are re-indexed. Track the progress using the returned file IDs to know when updates are complete.",
        "operationId": "batch_update_upload_batch_update_patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_batch_update_upload_batch_update_patch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "batch_update",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/upload_document": {
      "post": {
        "tags": [
          "upload"
        ],
        "summary": "Upload Files",
        "description": "Upload a single document for processing and indexing into your knowledge base.\n\nThis endpoint accepts documents in various formats and processes them for search and retrieval. You can include custom metadata to help organize and categorize your content.\n\nThe system extracts text content, processes it asynchronously, and makes it available for search queries. You can track the processing status using the returned file ID.",
        "operationId": "upload_files_upload_upload_document_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_files_upload_upload_document_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "upload_document",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/update_document": {
      "patch": {
        "tags": [
          "upload"
        ],
        "summary": "Update File",
        "description": "Replace an existing document with updated content.\n\nThis endpoint allows you to update a specific document that's already in your knowledge base. Provide the source ID of the document you want to modify, along with the new file content.\n\nThe system will process your update asynchronously and re-index the document with the new content. You can monitor the progress using the returned file ID.",
        "operationId": "update_file_upload_update_document_patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The source ID of the document to update",
              "title": "Source Id"
            },
            "description": "The source ID of the document to update"
          },
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_update_file_upload_update_document_patch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "update_document",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/upload_app_sources": {
      "post": {
        "tags": [
          "upload"
        ],
        "summary": "Upload App Sources",
        "description": "Upload structured data from applications or APIs for indexing.\n\nThis endpoint is designed for importing data from applications. If you are specifically using Cortex to provide search to an application, you should prefer this endpoint. It accepts structured source objects and allows you to clearly define contents of attachments\n\nThe system processes each source asynchronously and makes the content available for search and retrieval. Use this when you need to integrate search and indexing from data in your applications into your knowledge base.",
        "operationId": "upload_app_sources_upload_upload_app_sources_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SourceModel"
                },
                "description": "List of structured source objects containing app-generated data to be indexed",
                "title": "Sources"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppSourcesUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "upload_app_sources",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/upload_markdown": {
      "post": {
        "tags": [
          "upload"
        ],
        "summary": "Upload Markdown",
        "description": "Upload text or markdown content directly for processing.\n\nThis endpoint accepts plain text or markdown-formatted content that you want to add to your knowledge base. It's perfect for notes, documentation, articles, or any text-based content you want to make searchable.\n\nYou can include custom metadata to help organize and categorize your content. You can track the processing status using the returned file ID.",
        "operationId": "upload_markdown_upload_upload_markdown_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkdownUploadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "upload_markdown",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/upload_text": {
      "post": {
        "tags": [
          "upload"
        ],
        "summary": "Upload Markdown",
        "description": "Upload text or markdown content directly for processing.\n\nThis endpoint accepts plain text or markdown-formatted content that you want to add to your knowledge base. It's perfect for notes, documentation, articles, or any text-based content you want to make searchable.\n\nYou can include custom metadata to help organize and categorize your content. You can track the processing status using the returned file ID.",
        "operationId": "upload_markdown_upload_upload_text_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkdownUploadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "upload_text",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/update_markdown": {
      "patch": {
        "tags": [
          "upload"
        ],
        "summary": "Update Markdown",
        "description": "Update existing text or markdown content with new information.\n\nThis endpoint allows you to modify text or markdown content that's already in your knowledge base. Provide the source ID of the content you want to update, along with the new text.\n\nThe system will reprocess and re-index the updated content asynchronously. Use this when you need to correct information, add details, or refresh existing documentation.",
        "operationId": "update_markdown_upload_update_markdown_patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The source ID of the document to update",
              "title": "Source Id"
            },
            "description": "The source ID of the document to update"
          },
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkdownUploadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "update_markdown",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/update_text": {
      "patch": {
        "tags": [
          "upload"
        ],
        "summary": "Update Markdown",
        "description": "Update existing text or markdown content with new information.\n\nThis endpoint allows you to modify text or markdown content that's already in your knowledge base. Provide the source ID of the content you want to update, along with the new text.\n\nThe system will reprocess and re-index the updated content asynchronously. Use this when you need to correct information, add details, or refresh existing documentation.",
        "operationId": "update_markdown_upload_update_text_patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The source ID of the document to update",
              "title": "Source Id"
            },
            "description": "The source ID of the document to update"
          },
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkdownUploadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "update_text",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/upload_embeddings": {
      "post": {
        "tags": [
          "upload"
        ],
        "summary": "Upload Embeddings",
        "description": "Upload pre-computed embeddings for advanced similarity search.\n\nThis endpoint accepts vector embeddings that you've generated externally, allowing you to integrate with custom embedding models or existing vector databases. The embeddings represent chunks of your content as numerical vectors.\n\nThe system stores these embeddings and makes them available for semantic search and similarity matching. Use this when you want to leverage specialized embedding models or have existing vector representations.",
        "operationId": "upload_embeddings_upload_upload_embeddings_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingsUploadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "upload_embeddings",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/update_embeddings": {
      "patch": {
        "tags": [
          "upload"
        ],
        "summary": "Update Embeddings",
        "description": "Update existing embeddings with new vector representations.\n\nThis endpoint allows you to modify embeddings that are already stored in your knowledge base. Provide updated vector representations for specific chunks of content, identified by their chunk IDs.\n\nThe system will replace the existing embeddings with your new ones, ensuring that similarity searches reflect the most current vector representations. Use this when you need to update embeddings due to model improvements or content changes.",
        "operationId": "update_embeddings_upload_update_embeddings_patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingsUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "update_embeddings",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/scrape_webpage": {
      "post": {
        "tags": [
          "upload"
        ],
        "summary": "Scrape Webpage",
        "description": "Extract and index content from web pages automatically.\n\nThis endpoint initiates web scraping for the specified URL, extracting the main content, text, and structure from the webpage. It's perfect for capturing articles, documentation, or any web content you want to include in your knowledge base.\n\nThe system processes the webpage content asynchronously, cleaning and structuring the information for optimal search and retrieval. Use this when you need to add web content without manual copying and pasting.",
        "operationId": "scrape_webpage_upload_scrape_webpage_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "web_url",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The URL of the webpage to scrape and index",
              "title": "Web Url"
            },
            "description": "The URL of the webpage to scrape and index"
          },
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          },
          {
            "name": "file_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional custom file ID for the scraped content. If not provided, a unique ID will be generated",
              "default": "",
              "title": "File Id"
            },
            "description": "Optional custom file ID for the scraped content. If not provided, a unique ID will be generated"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "scrape_webpage",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/update_webpage": {
      "patch": {
        "tags": [
          "upload"
        ],
        "summary": "Update Scrape Job",
        "description": "Update web scraping content with fresh data from the source URL.\n\nThis endpoint refreshes the content for an existing web scraping job. Provide the source ID of the webpage content you want to update, and the system will re-scrape the URL to capture any changes.\n\nThe updated content gets processed asynchronously and re-indexed in your knowledge base. Use this to keep web content current when the source pages are frequently updated.",
        "operationId": "update_scrape_job_upload_update_webpage_patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "web_url",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The URL of the webpage to re-scrape",
              "title": "Web Url"
            },
            "description": "The URL of the webpage to re-scrape"
          },
          {
            "name": "source_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The file ID of the existing web scraping job to update",
              "title": "Source Id"
            },
            "description": "The file ID of the existing web scraping job to update"
          },
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleUploadData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "update_webpage",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/delete_source": {
      "delete": {
        "tags": [
          "upload"
        ],
        "summary": "Delete Memory",
        "description": "Remove documents and content from your knowledge base.\n\nThis endpoint permanently deletes the specified sources from your knowledge base. Once deleted, the content will no longer be available for search or retrieval.\n\nUse this carefully as the action cannot be undone. The system will confirm successful deletion of each source ID you specify.",
        "operationId": "delete_source_upload_delete_source_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteMemoryRequest",
                "description": "Request body containing the source IDs to delete and tenant information"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Document deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "default": true
                    },
                    "message": {
                      "type": "string",
                      "default": "Document deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "delete_source",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/upload/verify_processing": {
      "post": {
        "tags": [
          "upload"
        ],
        "summary": "Verifying Processing",
        "description": "Check the current processing status of your uploaded content.\n\nThis endpoint allows you to monitor the progress of documents, text, or other content you've uploaded. Simply provide the file ID to see whether processing is complete, still in progress, or if any errors occurred.\n\nUse this to determine when your content is ready for search and retrieval, or to troubleshoot any processing issues.",
        "operationId": "verifying_processing_upload_verify_processing_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The file ID to check processing status for",
              "title": "File Id"
            },
            "description": "The file ID to check processing status for"
          },
          {
            "name": "tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "default": "",
              "title": "Tenant Id"
            },
            "description": "Unique identifier for the tenant/organization"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessingStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "upload",
        "x-fern-sdk-method-name": "verify_processing",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/search/retrieve": {
      "post": {
        "tags": [
          "search"
        ],
        "summary": "Search",
        "description": "Search for relevant content within your indexed sources.\n\nThis endpoint returns the chunks related to the query you make. We use neural (embedding) search to give you the most relevant chunks. \nResults are ranked by relevance and can be customized with parameters like result limits and recency preferences.",
        "operationId": "search_search_retrieve_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SearchChunk"
                  },
                  "type": "array",
                  "title": "Response Search Search Retrieve Post"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-group-name": "search",
        "x-fern-sdk-method-name": "retrieve",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/search/full-text-search": {
      "post": {
        "tags": [
          "search"
        ],
        "summary": "Full Text Search",
        "description": "Perform full text search for exact matches within your indexed sources.\n\nUse this endpoint to find content chunks using BM25-based text matching with configurable operators.\nChoose between OR and AND operators to control how search terms are combined for precise text matching.",
        "operationId": "full_text_search_search_full_text_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FullTextSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SearchChunk"
                  },
                  "type": "array",
                  "title": "Response Full Text Search Search Full Text Search Post"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-group-name": "search",
        "x-fern-sdk-method-name": "full_text_search",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/embeddings/delete": {
      "delete": {
        "tags": [
          "embeddings"
        ],
        "summary": "Delete Embeddings",
        "description": "Delete embedding chunks by chunk ID.\n\nUse this to remove specific chunks from your embeddings index when they are no longer valid or should not appear in results.",
        "operationId": "delete_embeddings_embeddings_delete_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingsDeleteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingsDeleteData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-group-name": "embeddings",
        "x-fern-sdk-method-name": "delete",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/embeddings/search": {
      "post": {
        "tags": [
          "embeddings"
        ],
        "summary": "Search Embeddings",
        "description": "Find similar chunks using an embedding vector.\n\nUse this to retrieve the most similar chunk IDs to a single query embedding.\n\n\nExpected outcome\n- You receive the closest chunk IDs with optional similarity scores.",
        "operationId": "search_embeddings_embeddings_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingsSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingsSearchData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-group-name": "embeddings",
        "x-fern-sdk-method-name": "search",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/embeddings/by-chunk-ids": {
      "post": {
        "tags": [
          "embeddings"
        ],
        "summary": "Get Embeddings Based On Chunk Ids",
        "description": "Retrieve embeddings for specific chunk IDs.\n\nUse this when you already know the chunk IDs and need their corresponding embeddings.",
        "operationId": "get_embeddings_based_on_chunk_ids_embeddings_by_chunk_ids_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetEmbeddingsBasedOnChunkIdsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingsGetData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-group-name": "embeddings",
        "x-fern-sdk-method-name": "get_by_chunk_ids",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/embeddings/create_embeddings_tenant": {
      "post": {
        "tags": [
          "embeddings"
        ],
        "summary": "Create Embeddings Collection",
        "description": "Create an embeddings collection for a tenant.\n\nUse this to initialize storage so you can index and query embeddings for the tenant.",
        "operationId": "create_embeddings_collection_embeddings_create_embeddings_tenant_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id"
            },
            "description": "Unique identifier for the tenant/organization"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingsCreateCollectionData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "embeddings",
        "x-fern-sdk-method-name": "create_collection",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/user/create_tenant": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create Tenant",
        "description": "Create a tenant for your account.\n\nUse this endpoint to initialize a tenant space you can use for ingestion, embeddings, and search. Optionally include a metadata schema to enforce consistent attributes across documents.\n\nExpected outcome\n- A tenant is created and returned with its identifier.\n- If the tenant already exists, you receive a success message with the existing identifier.",
        "operationId": "create_tenant_user_create_tenant_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Unique identifier for the tenant/organization",
              "default": "",
              "title": "Tenant Id"
            },
            "description": "Unique identifier for the tenant/organization"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_tenant_user_create_tenant_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantCreateData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "user",
        "x-fern-sdk-method-name": "create_tenant",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    },
    "/tenant/stats": {
      "get": {
        "tags": [
          "tenant"
        ],
        "summary": "Get Tenant Stats",
        "description": "Retrieve usage stats for your tenant.\n\nUse this endpoint to check whether a tenant exists and view core metrics like total indexed objects and vector dimension. This helps you validate setup and monitor ingestion.\n\nExpected outcome\n- You receive the current object count and vector dimension for the tenant.\n- If the tenant does not exist, you get a not-found error.",
        "operationId": "get_tenant_stats_tenant_stats_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the tenant/organization",
              "title": "Tenant Id"
            },
            "description": "Unique identifier for the tenant/organization"
          },
          {
            "name": "sub_tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
              "default": "",
              "title": "Sub Tenant Id"
            },
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantStats"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualErrorResponse"
                }
              }
            }
          }
        },
        "x-fern-sdk-group-name": "tenant",
        "x-fern-sdk-method-name": "stats",
        "x-fern-sdk-audience": [
          "public"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ActualErrorResponse": {
        "properties": {
          "detail": {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        },
        "type": "object",
        "required": [
          "detail"
        ],
        "title": "ActualErrorResponse"
      },
      "AppSourcesUploadData": {
        "properties": {
          "uploaded": {
            "items": {
              "$ref": "#/components/schemas/FileUploadResult"
            },
            "type": "array",
            "title": "Uploaded"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": "App sources upload completed successfully"
          }
        },
        "type": "object",
        "title": "AppSourcesUploadData"
      },
      "AttachmentModel": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier for the attachment.",
            "default": ""
          },
          "url": {
            "type": "string",
            "title": "Url",
            "description": "Public or internal URL referencing the attachment resource.",
            "default": ""
          },
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Human-readable title or filename of the attachment.",
            "default": ""
          },
          "content_type": {
            "type": "string",
            "title": "Content Type",
            "description": "MIME type of the attachment (e.g., application/pdf).",
            "default": ""
          },
          "content_url": {
            "type": "string",
            "title": "Content Url",
            "description": "Direct URL for content retrieval when different from the reference URL.",
            "default": ""
          },
          "misc": {
            "additionalProperties": true,
            "type": "object",
            "title": "Misc",
            "description": "Additional attachment attributes defined by the tenant (free-form)."
          },
          "content": {
            "$ref": "#/components/schemas/ContentModel",
            "description": "Structured content payload for the attachment when available."
          }
        },
        "type": "object",
        "title": "AttachmentModel"
      },
      "BM25OperatorType": {
        "type": "string",
        "enum": [
          "or",
          "and"
        ],
        "title": "BM25OperatorType"
      },
      "BatchUploadData": {
        "properties": {
          "uploaded": {
            "items": {
              "$ref": "#/components/schemas/FileUploadResult"
            },
            "type": "array",
            "title": "Uploaded"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": "Batch upload completed successfully"
          }
        },
        "type": "object",
        "title": "BatchUploadData"
      },
      "Body_batch_update_upload_batch_update_patch": {
        "properties": {
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files",
            "description": "The document file to upload (e.g., PDF, DOCX, TXT)"
          },
          "source_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Ids",
            "description": "List of source IDs corresponding to the files being updated"
          },
          "tenant_metadata": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Metadata",
            "description": "JSON string containing tenant-level document metadata (e.g., department, compliance_tag)\n\nExample: \u003E \"{\"department\":\"Finance\",\"compliance_tag\":\"GDPR\"}\"\n\n"
          },
          "document_metadata": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Metadata",
            "description": "JSON string containing document-specific metadata (e.g., title, author, file_id). If file_id is not provided, the system will generate an ID automatically.\n\nExample: \u003E \"{\"title\":\"Q1 Report.pdf\",\"author\":\"Alice Smith\",\"file_id\":\"custom_file_123\"}\"\n\n\n"
          }
        },
        "type": "object",
        "required": [
          "files"
        ],
        "title": "Body_batch_update_upload_batch_update_patch"
      },
      "Body_batch_upload_upload_batch_upload_post": {
        "properties": {
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files",
            "description": "The document file to upload (e.g., PDF, DOCX, TXT)"
          },
          "tenant_metadata": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Metadata",
            "description": "JSON string containing tenant-level document metadata (e.g., department, compliance_tag)\n\nExample: \u003E \"{\"department\":\"Finance\",\"compliance_tag\":\"GDPR\"}\"\n\n"
          },
          "document_metadata": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Metadata",
            "description": "JSON string containing document-specific metadata (e.g., title, author, file_id). If file_id is not provided, the system will generate an ID automatically.\n\nExample: \u003E \"{\"title\":\"Q1 Report.pdf\",\"author\":\"Alice Smith\",\"file_id\":\"custom_file_123\"}\"\n\n\n"
          }
        },
        "type": "object",
        "required": [
          "files"
        ],
        "title": "Body_batch_upload_upload_batch_upload_post"
      },
      "Body_create_tenant_user_create_tenant_post": {
        "properties": {
          "tenant_metadata_schema": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Metadata Schema"
          }
        },
        "type": "object",
        "title": "Body_create_tenant_user_create_tenant_post"
      },
      "Body_update_file_upload_update_document_patch": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File",
            "description": "The document file to upload (e.g., PDF, DOCX, TXT)"
          },
          "tenant_metadata": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Metadata",
            "description": "JSON string containing tenant-level document metadata (e.g., department, compliance_tag)\n\nExample: \u003E \"{\"department\":\"Finance\",\"compliance_tag\":\"GDPR\"}\"\n\n"
          },
          "document_metadata": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Metadata",
            "description": "JSON string containing document-specific metadata (e.g., title, author, file_id). If file_id is not provided, the system will generate an ID automatically.\n\nExample: \u003E \"{\"title\":\"Q1 Report.pdf\",\"author\":\"Alice Smith\",\"file_id\":\"custom_file_123\"}\"\n\n\n"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_update_file_upload_update_document_patch"
      },
      "Body_upload_files_upload_upload_document_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File",
            "description": "The document file to upload (e.g., PDF, DOCX, TXT)"
          },
          "tenant_metadata": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Metadata",
            "description": "JSON string containing tenant-level document metadata (e.g., department, compliance_tag)\n\nExample: \u003E \"{\"department\":\"Finance\",\"compliance_tag\":\"GDPR\"}\"\n\n"
          },
          "document_metadata": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Metadata",
            "description": "JSON string containing document-specific metadata (e.g., title, author, file_id). If file_id is not provided, the system will generate an ID automatically.\n\nExample: \u003E \"{\"title\":\"Q1 Report.pdf\",\"author\":\"Alice Smith\",\"file_id\":\"custom_file_123\"}\"\n\n\n"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_upload_files_upload_upload_document_post"
      },
      "ContentModel": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text",
            "description": "Plain text content extracted or provided for indexing.",
            "default": ""
          },
          "html_base64": {
            "type": "string",
            "title": "Html Base64",
            "description": "Base64-encoded HTML content preserving structure and formatting.",
            "default": ""
          },
          "csv_base64": {
            "type": "string",
            "title": "Csv Base64",
            "description": "Base64-encoded CSV data for tabular content ingestion.",
            "default": ""
          },
          "markdown": {
            "type": "string",
            "title": "Markdown",
            "description": "Raw Markdown content to be indexed as rich text.",
            "default": ""
          },
          "files": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Files",
            "description": "List of file descriptors associated with the source (e.g., filenames, sizes)."
          },
          "layout": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Layout",
            "description": "Optional layout metadata such as sections or blocks to guide chunking."
          }
        },
        "type": "object",
        "title": "ContentModel"
      },
      "DeleteMemoryRequest": {
        "properties": {
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id",
            "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation"
          },
          "source_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Source Ids"
          },
          "sub_tenant_id": {
            "type": "string",
            "title": "Sub Tenant Id",
            "description": "Sub-tenant identifier",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "tenant_id",
          "source_ids"
        ],
        "title": "DeleteMemoryRequest"
      },
      "EmbeddingsCreateCollectionData": {
        "properties": {
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id"
          },
          "sub_tenant_id": {
            "type": "string",
            "title": "Sub Tenant Id"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": "Embeddings collection created successfully"
          }
        },
        "type": "object",
        "required": [
          "tenant_id",
          "sub_tenant_id"
        ],
        "title": "EmbeddingsCreateCollectionData"
      },
      "EmbeddingsDeleteData": {
        "properties": {
          "total_deleted": {
            "type": "integer",
            "title": "Total Deleted"
          },
          "status": {
            "additionalProperties": {
              "type": "boolean"
            },
            "type": "object",
            "title": "Status"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": "Embeddings deleted successfully"
          }
        },
        "type": "object",
        "title": "EmbeddingsDeleteData"
      },
      "EmbeddingsDeleteRequest": {
        "properties": {
          "chunk_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Chunk Ids",
            "description": "The chunk IDs of the source you want to delete"
          },
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id",
            "description": "Unique identifier for the tenant/organization"
          },
          "sub_tenant_id": {
            "type": "string",
            "title": "Sub Tenant Id",
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "chunk_ids",
          "tenant_id"
        ],
        "title": "EmbeddingsDeleteRequest"
      },
      "EmbeddingsGetData": {
        "properties": {
          "embeddings": {
            "additionalProperties": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Embeddings"
          },
          "not_found_chunk_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Not Found Chunk Ids"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": "Embeddings retrieved successfully"
          }
        },
        "type": "object",
        "title": "EmbeddingsGetData"
      },
      "EmbeddingsSearchData": {
        "properties": {
          "chunk_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Chunk Ids"
          },
          "scores": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Scores"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": "Embeddings search completed successfully"
          }
        },
        "type": "object",
        "title": "EmbeddingsSearchData"
      },
      "EmbeddingsSearchRequest": {
        "properties": {
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id",
            "description": "Unique identifier for the tenant/organization"
          },
          "embeddings": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Embeddings",
            "description": "The embedding vector for search"
          },
          "sub_tenant_id": {
            "type": "string",
            "title": "Sub Tenant Id",
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
            "default": ""
          },
          "max_chunks": {
            "type": "integer",
            "title": "Max Chunks",
            "default": 10
          }
        },
        "type": "object",
        "required": [
          "tenant_id"
        ],
        "title": "EmbeddingsSearchRequest"
      },
      "EmbeddingsUpdateRequest": {
        "properties": {
          "embeddings": {
            "additionalProperties": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Embeddings",
            "description": "The embeddings of source you want to index"
          }
        },
        "type": "object",
        "title": "EmbeddingsUpdateRequest"
      },
      "EmbeddingsUploadRequest": {
        "properties": {
          "embeddings": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Embeddings",
            "description": "The embeddings of source you want to index"
          },
          "file_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Id",
            "description": "The Source ID of the target source you want to index",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "embeddings"
        ],
        "title": "EmbeddingsUploadRequest"
      },
      "ErrorResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "default": false
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": "Error occurred"
          },
          "error_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Code"
          },
          "data": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data"
          }
        },
        "type": "object",
        "title": "ErrorResponse"
      },
      "FetchContentData": {
        "properties": {
          "file_id": {
            "type": "string",
            "title": "File Id"
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "file_content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Content"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": "Content fetched successfully"
          }
        },
        "type": "object",
        "title": "FetchContentData"
      },
      "FetchContentRequest": {
        "properties": {
          "file_id": {
            "type": "string",
            "title": "File Id",
            "description": "Unique identifier for the file to fetch"
          },
          "file_type": {
            "type": "string",
            "title": "File Type",
            "description": "Type of file (e.g., 'app', 'file', or other)"
          },
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id",
            "description": "Tenant identifier for multi-tenancy"
          },
          "return_content": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Return Content",
            "description": "Whether to return the file content along with the URL",
            "default": true
          },
          "sub_tenant_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sub Tenant Id",
            "description": "Sub-tenant identifier, defaults to tenant_id if not provided",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "file_id",
          "file_type",
          "tenant_id"
        ],
        "title": "FetchContentRequest"
      },
      "FileUploadResult": {
        "properties": {
          "file_id": {
            "type": "string",
            "title": "File Id"
          },
          "filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filename"
          }
        },
        "type": "object",
        "required": [
          "file_id"
        ],
        "title": "FileUploadResult"
      },
      "FullTextSearchRequest": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query",
            "description": "Search terms to find in your content"
          },
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id",
            "description": "Unique identifier for the tenant/organization"
          },
          "sub_tenant_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sub Tenant Id",
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
            "default": ""
          },
          "operator": {
            "$ref": "#/components/schemas/BM25OperatorType",
            "description": "How to combine search terms (OR or AND)",
            "default": "or"
          },
          "max_chunks": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Chunks",
            "description": "Maximum number of results to return",
            "default": 25
          }
        },
        "type": "object",
        "required": [
          "query",
          "tenant_id"
        ],
        "title": "FullTextSearchRequest"
      },
      "GetEmbeddingsBasedOnChunkIdsRequest": {
        "properties": {
          "chunk_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Chunk Ids",
            "description": "The chunk IDs of the source you want to get embeddings for"
          },
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id",
            "description": "Unique identifier for the tenant/organization"
          },
          "sub_tenant_id": {
            "type": "string",
            "title": "Sub Tenant Id",
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "chunk_ids",
          "tenant_id"
        ],
        "title": "GetEmbeddingsBasedOnChunkIdsRequest"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "ListSourcesResponse": {
        "properties": {
          "sources": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Source"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "array",
            "title": "Sources",
            "description": "List of source documents retrieved"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Indicates whether the request was successful",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Response message describing the operation result",
            "default": "Sources retrieved successfully"
          }
        },
        "type": "object",
        "title": "ListSourcesResponse"
      },
      "MarkdownUploadRequest": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content",
            "description": "The text or markdown content to upload"
          },
          "tenant_metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Metadata",
            "description": "JSON string containing tenant-level document metadata (e.g., department, compliance_tag)\n\nExample: \u003E \"{\"department\":\"Finance\",\"compliance_tag\":\"GDPR\"}\"\n\n"
          },
          "document_metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Metadata",
            "description": "JSON string containing document-specific metadata (e.g., title, author, file_id). If file_id is not provided, the system will generate an ID automatically.\n\nExample: \u003E \"{\"title\":\"Q1 Report.pdf\",\"author\":\"Alice Smith\",\"file_id\":\"custom_file_123\"}\"\n\n\n"
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "MarkdownUploadRequest"
      },
      "ProcessingStatus": {
        "properties": {
          "file_id": {
            "type": "string",
            "title": "File Id"
          },
          "indexing_status": {
            "type": "string",
            "title": "Indexing Status"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": "Processing status retrieved successfully"
          }
        },
        "type": "object",
        "title": "ProcessingStatus"
      },
      "QnARequest": {
        "properties": {
          "question": {
            "type": "string",
            "title": "Question"
          },
          "session_id": {
            "type": "string",
            "title": "Session Id"
          },
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id"
          },
          "context_list": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Context List"
          },
          "search_modes": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Search Modes"
          },
          "sub_tenant_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sub Tenant Id",
            "default": ""
          },
          "highlight_chunks": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Highlight Chunks",
            "default": false
          },
          "stream": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stream",
            "default": false
          },
          "search_alpha": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Search Alpha",
            "default": 0.8
          },
          "recency_bias": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recency Bias",
            "default": 0.2
          },
          "ai_generation": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ai Generation",
            "default": true
          },
          "top_n": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Top N"
          },
          "user_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Name",
            "default": ""
          },
          "user_instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Instructions",
            "default": ""
          },
          "multi_step_reasoning": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Multi Step Reasoning",
            "default": true
          },
          "auto_agent_routing": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Auto Agent Routing",
            "default": true
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "question",
          "session_id",
          "tenant_id"
        ],
        "title": "QnARequest"
      },
      "SearchChunk": {
        "properties": {
          "chunk_uuid": {
            "type": "string",
            "title": "Chunk Uuid",
            "description": "Unique identifier for this content chunk"
          },
          "source_id": {
            "type": "string",
            "title": "Source Id",
            "description": "Unique identifier for the source document"
          },
          "chunk_content": {
            "type": "string",
            "title": "Chunk Content",
            "description": "The actual text content of this chunk"
          },
          "source_type": {
            "type": "string",
            "title": "Source Type",
            "description": "Type of the source document (file, webpage, etc.)",
            "default": ""
          },
          "source_upload_time": {
            "type": "string",
            "title": "Source Upload Time",
            "description": "When the source document was originally uploaded",
            "default": ""
          },
          "source_title": {
            "type": "string",
            "title": "Source Title",
            "description": "Title or name of the source document",
            "default": ""
          },
          "source_last_updated_time": {
            "type": "string",
            "title": "Source Last Updated Time",
            "description": "When the source document was last modified",
            "default": ""
          },
          "layout": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Layout",
            "description": "Layout of the chunk in original document. You will always get the start offset of the chunk. In most cases, if possible, you will get the page number as well."
          },
          "source_url": {
            "type": "string",
            "title": "Source Url",
            "description": "URL or path to the original source document",
            "default": ""
          },
          "cortex_metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cortex Metadata",
            "description": "Additional metadata specific to the Cortex platform"
          },
          "document_metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Metadata",
            "description": "Metadata extracted from the source document"
          },
          "tenant_metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Metadata",
            "description": "Custom metadata associated with your tenant"
          }
        },
        "type": "object",
        "required": [
          "chunk_uuid",
          "source_id",
          "chunk_content"
        ],
        "title": "SearchChunk"
      },
      "SearchRequest": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query",
            "description": "Search terms to find relevant content"
          },
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id",
            "description": "Unique identifier for the tenant/organization"
          },
          "sub_tenant_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sub Tenant Id",
            "description": "Optional sub-tenant identifier for organizing data within a tenant. If not provided, defaults to tenant_id",
            "default": ""
          },
          "max_chunks": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Chunks",
            "description": "Maximum number of results to return"
          },
          "alpha": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Alpha",
            "description": "Search ranking algorithm parameter (0.0-1.0 or 'auto')",
            "default": 0.8
          },
          "recency_bias": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recency Bias",
            "description": "Preference for newer content (0.0 = no bias, 1.0 = strong recency preference)",
            "default": 0.5
          }
        },
        "type": "object",
        "required": [
          "query",
          "tenant_id"
        ],
        "title": "SearchRequest"
      },
      "SingleUploadData": {
        "properties": {
          "file_id": {
            "type": "string",
            "title": "File Id"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": "Upload completed successfully"
          }
        },
        "type": "object",
        "required": [
          "file_id"
        ],
        "title": "SingleUploadData"
      },
      "Source": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier for the source document"
          },
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Display title of the source document"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of content (document, file, text, etc.)"
          },
          "timestamp": {
            "type": "string",
            "title": "Timestamp",
            "description": "When the source was originally created or uploaded"
          },
          "content": {
            "$ref": "#/components/schemas/SourceContent"
          },
          "collections": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Collections"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Brief summary or description of the source content",
            "default": ""
          },
          "note": {
            "type": "string",
            "title": "Note",
            "default": ""
          },
          "url": {
            "type": "string",
            "title": "Url",
            "default": ""
          },
          "cortex_metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Cortex Metadata"
          },
          "document_metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Document Metadata",
            "description": "Additional metadata specific to the document"
          },
          "tenant_metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Tenant Metadata",
            "description": "Metadata related to the tenant and organizational context"
          },
          "meta": {
            "additionalProperties": true,
            "type": "object",
            "title": "Meta",
            "description": "Additional system metadata and processing information"
          },
          "attachments": {
            "items": {},
            "type": "array",
            "title": "Attachments"
          }
        },
        "type": "object",
        "required": [
          "id",
          "title",
          "type",
          "timestamp",
          "content"
        ],
        "title": "Source"
      },
      "SourceBodyParams": {
        "properties": {
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id"
          },
          "source_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Source Ids"
          }
        },
        "type": "object",
        "required": [
          "tenant_id",
          "source_ids"
        ],
        "title": "SourceBodyParams"
      },
      "SourceContent": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text",
            "description": "Plain text content of the source",
            "default": ""
          },
          "html_base64": {
            "type": "string",
            "title": "Html Base64",
            "description": "HTML content encoded in base64 format",
            "default": ""
          },
          "csv_base64": {
            "type": "string",
            "title": "Csv Base64",
            "description": "CSV data encoded in base64 format",
            "default": ""
          },
          "markdown": {
            "type": "string",
            "title": "Markdown",
            "description": "Markdown formatted content",
            "default": ""
          },
          "files": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Files",
            "description": "List of associated files and their metadata"
          },
          "layout": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Layout",
            "description": "Document layout and structural information"
          }
        },
        "type": "object",
        "title": "SourceContent"
      },
      "SourceModel": {
        "properties": {
          "collections": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Collections",
            "description": "Deprecated. Will soon be removed"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Stable, unique identifier for the source. If omitted, one may be generated upstream.",
            "default": ""
          },
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Short human-readable title for the source.",
            "default": ""
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "High-level category of the source (e.g., document, email, ticket).",
            "default": ""
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Optional long-form description providing additional context.",
            "default": ""
          },
          "note": {
            "type": "string",
            "title": "Note",
            "description": "Free-form notes for internal use or ingestion hints.",
            "default": ""
          },
          "url": {
            "type": "string",
            "title": "Url",
            "description": "Canonical URL or reference link associated with the source.",
            "default": ""
          },
          "timestamp": {
            "type": "string",
            "title": "Timestamp",
            "description": "Creation or last-updated timestamp of the source in ISO-8601 format.",
            "default": ""
          },
          "content": {
            "$ref": "#/components/schemas/ContentModel",
            "description": "Primary content payload used for indexing and retrieval."
          },
          "cortex_metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Cortex Metadata",
            "description": "[Deprecated] Use tenant_metadata. Retained for backward compatibility; semantics are the same as tenant_metadata."
          },
          "tenant_metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Tenant Metadata",
            "description": "JSON string containing tenant-level document metadata (e.g., department, compliance_tag)\n\nExample: \u003E \"{\"department\":\"Finance\",\"compliance_tag\":\"GDPR\"}\"\n\n"
          },
          "document_metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Document Metadata",
            "description": "JSON string containing document-specific metadata (e.g., title, author, file_id). If file_id is not provided, the system will generate an ID automatically.\n\nExample: \u003E \"{\"title\":\"Q1 Report.pdf\",\"author\":\"Alice Smith\",\"file_id\":\"custom_file_123\"}\"\n\n\n"
          },
          "meta": {
            "additionalProperties": true,
            "type": "object",
            "title": "Meta",
            "description": "System-provided attributes (e.g., app_name, local file size) not intended for search filtering."
          },
          "attachments": {
            "items": {
              "$ref": "#/components/schemas/AttachmentModel"
            },
            "type": "array",
            "title": "Attachments",
            "description": "Attachments related to the source such as images, PDFs, or supplemental files."
          }
        },
        "type": "object",
        "title": "SourceModel"
      },
      "SubTenantIdsData": {
        "properties": {
          "collection_name": {
            "type": "string",
            "title": "Collection Name",
            "description": "Name of the tenant containing the sub-tenants"
          },
          "sub_tenant_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Sub Tenant Ids",
            "description": "List of all sub-tenant identifiers found"
          },
          "count": {
            "type": "integer",
            "title": "Count",
            "description": "Total number of sub-tenants available"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Indicates whether the sub-tenant retrieval was successful",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Response message describing the operation result",
            "default": "Sub-tenant IDs fetched successfully"
          }
        },
        "type": "object",
        "required": [
          "collection_name",
          "sub_tenant_ids",
          "count"
        ],
        "title": "SubTenantIdsData"
      },
      "TenantCreateData": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Current status of the tenant creation process"
          },
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id",
            "description": "Unique identifier assigned to the new tenant"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Indicates whether the tenant creation was successful",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Response message describing the creation result",
            "default": "Tenant created successfully"
          }
        },
        "type": "object",
        "required": [
          "status",
          "tenant_id"
        ],
        "title": "TenantCreateData"
      },
      "TenantStats": {
        "properties": {
          "object_count": {
            "type": "integer",
            "title": "Object Count",
            "description": "Total number of objects stored for this tenant"
          },
          "tenant_name": {
            "type": "string",
            "title": "Tenant Name",
            "description": "Name identifier for the tenant"
          },
          "vector_dimension": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vector Dimension",
            "description": "Dimensions of the vector embeddings used for this tenant"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Indicates whether the stats retrieval was successful",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Response message describing the operation result",
            "default": "Tenant stats retrieved successfully"
          }
        },
        "type": "object",
        "required": [
          "object_count",
          "tenant_name"
        ],
        "title": "TenantStats"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}