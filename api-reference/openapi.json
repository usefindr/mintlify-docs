{
    "openapi": "3.1.0",
    "info": {
      "title": "Cortex API",
      "description": "Documentation for Cortex's core upload and retrieval endpoints",
      "license": {
        "name": "MIT"
      },
      "version": "1.0.0"
    },
    "servers": [
      {
        "url": "https://api.usecortex.ai"
      }
    ],
    "security": [
      {
        "bearerAuth": []
      }
    ],
    "paths": {
      "/upload/scrape_webpage": {
        "post": {
          "description": "Scrapes and processes content from a public webpage.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "web_url",
              "in": "query",
              "required": true,
              "description": "The public URL to scrape",
              "schema": {
                "type": "string"
              },
              "example": "https://example.com/article"
            },
            {
              "name": "tenant_id",
              "in": "query",
              "required": true,
              "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation",
              "schema": {
                "type": "string"
              },
              "example": "tenant_456"
            },
            {
              "name": "sub_tenant_id",
              "in": "query",
              "required": false,
              "description": "Secondary organizational identifier (e.g., department, team, project) within a tenant for hierarchical data organization; defaults to tenant_id if not provided",
              "schema": {
                "type": "string"
              },
              "example": "subtenant_123"
            },
            {
              "name": "file_id",
              "in": "query",
              "required": false,
              "description": "Custom file identifier. If not provided, the system will generate an ID automatically.",
              "schema": {
                "type": "string"
              },
              "example": "custom_webpage_123"
            }
          ],
          "responses": {
            "200": {
              "description": "Webpage scraped successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Scrape webpage job uploaded to S3 and SQS."
                      },
                      "file_id": {
                        "type": "string",
                        "example": "ScrapeJobcfe5d09bf58047b8922908dc8ea967371753161944",
                        "description": "ID of the uploaded webpage job"
                      }
                    },
                    "required": ["success", "message", "file_id"]
                  },
                  "example": {
                    "success": true,
                    "message": "Scrape webpage job uploaded to S3 and SQS.",
                    "file_id": "ScrapeJobcfe5d09bf58047b8922908dc8ea967371753161944"
                  }
                }
              }
            },
            "422": {
              "description": "Incomplete/invalid parameters"
            },
            "401": {
              "description": "Invalid or missing API key"
            },
            "5XX": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/upload/upload_document": {
        "post": {
          "description": "Uploads a document (e.g., PDF, DOCX) for processing and indexing.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "tenant_id",
              "in": "query",
              "required": false,
              "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation",
              "schema": {
                "type": "string"
              },
              "example": "your_tenant_id"
            },
            {
              "name": "sub_tenant_id",
              "in": "query",
              "required": false,
              "description": "Secondary organizational identifier (e.g., department, team, project) within a tenant for hierarchical data organization; defaults to tenant_id if not provided",
              "schema": {
                "type": "string"
              },
              "example": "your_sub_tenant_id"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "string",
                      "format": "binary",
                      "description": "Document file to upload (PDF, DOCX, TXT, etc.)",
                      "example": "document.pdf"
                    },
                    "tenant_metadata": {
                      "type": "object",
                      "description": "JSON string containing tenant-level document metadata (e.g., department, compliance_tag)",
                      "example": "{\"department\":\"Finance\",\"compliance_tag\":\"GDPR\"}"
                    },
                    "document_metadata": {
                      "type": "object",
                      "description": "JSON string containing document-specific metadata (e.g., title, author, file_id). If file_id is not provided, the system will generate an ID automatically.",
                      "example": "{\"title\":\"Q1 Report.pdf\",\"author\":\"Alice Smith\",\"file_id\":\"custom_file_123\"}"
                    }
                  },
                  "required": [
                    "file"
                  ]
                },
                "examples": {
                  "document_upload": {
                    "summary": "Upload a PDF document",
                    "description": "Example of uploading a PDF document with tenant metadata",
                    "value": {
                      "file": "document.pdf",
                      "tenant_metadata": "{\"department\":\"Finance\",\"compliance_tag\":\"GDPR\"}",
                      "document_metadata": "{\"title\":\"Q1 Report.pdf\",\"author\":\"Alice Smith\",\"file_id\":\"custom_file_123\"}"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Document uploaded and indexed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Document uploaded successfully"
                      },
                      "document_id": {
                        "type": "string",
                        "example": "doc_123456"
                      }
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Incomplete/invalid parameters"
            },
            "401": {
              "description": "Invalid or missing API key"
            },
            "5XX": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/upload/upload_text": {
        "post": {
          "description": "Uploads text or markdown content for processing and indexing.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "description": "Request content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "tenant_id",
              "in": "query",
              "required": false,
              "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sub_tenant_id",
              "in": "query",
              "required": false,
              "description": "Secondary organizational identifier (e.g., department, team, project) within a tenant for hierarchical data organization; defaults to tenant_id if not provided",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "description": "The text or markdown content to upload and process"
                    },
                    "tenant_metadata": {
                      "type": "object",
                      "description": "Custom metadata object to associate with the uploaded content for tenant-level filtering (e.g., department, compliance_tag)"
                    },
                    "document_metadata": {
                      "type": "object",
                      "description": "Custom metadata object to associate with the uploaded content for document-level filtering (e.g., title, author, file_id). If file_id is not provided, the system will generate an ID automatically."
                    }
                  },
                  "required": [
                    "content"
                  ]
                },
                "examples": {
                  "upload_text": {
                    "summary": "Upload textual content",
                    "description": "Example of uploading markdown content with tenant and document metadata",
                    "value": {
                      "content": "This is sample markdown content that will be processed and indexed.",
                      "tenant_metadata": {
                        "department": "Finance",
                        "compliance_tag": "GDPR"
                      },
                      "document_metadata": {
                        "title": "Q1 Report.pdf",
                        "author": "Alice Smith",
                        "file_id": "custom_text_123"
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Upload success and generated file ID.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean"
                      },
                      "file_id": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "success": true,
                    "file_id": "CortexDocb7a1db714c9"
                  }
                }
              }
            },
            "422": {
              "description": "Content field is required and cannot be empty"
            },
            "500": {
              "description": "Upload failed or error while uploading markdown"
            },
            "401": {
              "description": "Invalid or missing API key"
            }
          }
        }
      },
      "/upload/batch_upload": {
        "post": {
          "description": "Uploads multiple documents in a single request for processing and indexing.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "description": "Request content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "tenant_id",
              "in": "query",
              "required": true,
              "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sub_tenant_id",
              "in": "query",
              "required": false,
              "description": "Secondary organizational identifier (e.g., department, team, project) within a tenant for hierarchical data organization; defaults to tenant_id if not provided",
              "schema": {
                "type": "string"
              },
              "example": "your_sub_tenant_id"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "files": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "binary"
                      },
                      "description": "Multiple document files to upload (PDF, DOCX, TXT, etc.)"
                    },
                    "tenant_metadata": {
                      "type": "string",
                      "description": "JSON string containing tenant metadata for the documents"
                    },
                    "document_metadata": {
                      "type": "string",
                      "description": "JSON string containing document-specific metadata for the documents (e.g., title, author, file_id). If file_id is not provided, the system will generate an ID automatically."
                    }
                  },
                  "required": [
                    "files"
                  ]
                },
                "examples": {
                  "batch_upload": {
                    "summary": "Upload multiple documents",
                    "description": "Example of uploading multiple documents with tenant metadata",
                    "value": {
                      "files": [
                        "document1.pdf",
                        "document2.docx",
                        "document3.txt"
                      ],
                      "tenant_metadata": "[{\"department\":\"Finance\",\"compliance_tag\":\"GDPR\"},{\"department\":\"Finance\",\"compliance_tag\":\"GDPR\"}]",
                      "document_metadata": "[{\"title\":\"Q1 Report.pdf\",\"author\":\"Alice Smith\",\"file_id\":\"custom_batch_123\"},{\"title\":\"Q2 Report.pdf\",\"author\":\"Bob Jones\",\"file_id\":\"custom_batch_456\"}]"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Batch upload successful",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Batch upload successful"
                      },
                      "document_ids": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "doc_123",
                          "doc_456",
                          "doc_789"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Invalid or missing API key"
            },
            "422": {
              "description": "Incomplete/invalid parameters"
            },
            "5XX": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/upload/batch_update": {
        "patch": {
          "description": "Updates multiple existing sources by uploading new files corresponding to each source ID.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "description": "Request content type",
              "schema": {
                "type": "string",
                "default": "multipart/form-data"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "tenant_id",
              "in": "query",
              "required": true,
              "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sub_tenant_id",
              "in": "query",
              "required": false,
              "description": "Secondary organizational identifier (e.g., department, team, project) within a tenant for hierarchical data organization; defaults to tenant_id if not provided",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "files": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "binary"
                      },
                      "description": "Files to upload for each corresponding source ID"
                    },
                    "source_ids": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "A list of source IDs matching the files order"
                    },
                    "tenant_metadata": {
                      "type": "string",
                      "description": "JSON string array of tenant metadata objects, aligned by index with files"
                    },
                    "document_metadata": {
                      "type": "string",
                      "description": "JSON string array of document metadata objects, aligned by index with files"
                    }
                  },
                  "required": [
                    "files",
                    "source_ids"
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Batch update accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean"
                      },
                      "uploaded": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "file_id": {
                              "type": "string"
                            },
                            "filename": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "success": true,
                    "uploaded": [
                      {
                        "file_id": "CortexDoc123",
                        "filename": "updated1.pdf"
                      },
                      {
                        "file_id": "CortexDoc456",
                        "filename": "updated2.docx"
                      }
                    ],
                    "message": "Batch update messages pushed to SQS."
                  }
                }
              }
            },
            "400": {
              "description": "Validation error (e.g., mismatch between files and source_ids)"
            },
            "401": {
              "description": "Invalid or missing API key"
            },
            "5XX": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/tenant/stats": {
        "get": {
          "description": "Retrieve statistics for a specific tenant including object count, vector dimensions, and tenant information.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": { "type": "string" },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": { "type": "string", "default": "application/json" }
            },
            {
              "name": "tenant_id",
              "in": "query",
              "required": true,
              "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation",
              "schema": { "type": "string" },
              "example": "tenant_456"
            },
            {
              "name": "sub_tenant_id",
              "in": "query",
              "required": false,
              "description": "Secondary organizational identifier (e.g., department, team, project) within a tenant for hierarchical data organization; defaults to tenant_id if not provided",
              "schema": { "type": "string" },
              "example": "subtenant_123"
            }
          ],
          "responses": {
            "200": {
              "description": "Tenant statistics retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "object_count": {
                        "type": "integer",
                        "description": "Number of objects/embeddings stored for the tenant",
                        "example": 9
                      },
                      "vector_dimension": {
                        "type": "integer",
                        "description": "Dimension size of the embedding vectors for this tenant",
                        "example": 6
                      },
                      "tenant_name": {
                        "type": "string",
                        "description": "The name/identifier of the tenant",
                        "example": "Unlsbghv245109_zwv"
                      }
                    },
                    "required": ["object_count", "vector_dimension", "tenant_name"]
                  },
                  "example": {
                    "object_count": 9,
                    "vector_dimension": 6,
                    "tenant_name": "Unlsbghv245109_zwv"
                  }
                }
              }
            },
            "400": { "description": "Missing or invalid tenant_id parameter" },
            "401": { "description": "Invalid or missing API key" },
            "404": { "description": "Tenant not found or no data available" },
            "500": { "description": "Internal server error" }
          }
        }
      },
      "/upload/update_document": {
        "patch": {
          "description": "Updates a single existing source's file content.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "tenant_id",
              "in": "query",
              "required": false,
              "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sub_tenant_id",
              "in": "query",
              "required": false,
              "description": "Secondary organizational identifier (e.g., department, team, project) within a tenant for hierarchical data organization; defaults to tenant_id if not provided",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "source_id",
              "in": "query",
              "required": true,
              "description": "The ID of the source to update",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "string",
                      "format": "binary",
                      "description": "New document file to replace content of the source (PDF, DOCX, TXT, etc.)"
                    },
                    "tenant_metadata": {
                      "type": "object",
                      "description": "JSON string with tenant-level metadata"
                    },
                    "document_metadata": {
                      "type": "object",
                      "description": "JSON string with document-level metadata"
                    }
                  },
                  "required": [
                    "file"
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Update accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      },
                      "file_id": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "success": true,
                    "message": "Update message pushed to SQS.",
                    "file_id": "CortexDoc123"
                  }
                }
              }
            },
            "400": {
              "description": "Missing source_id or invalid payload"
            },
            "401": {
              "description": "Invalid or missing API key"
            },
            "5XX": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/upload/update_text": {
        "patch": {
          "description": "Updates an existing text/markdown source's content by source ID.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "description": "Request content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "tenant_id",
              "in": "query",
              "required": false,
              "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sub_tenant_id",
              "in": "query",
              "required": false,
              "description": "Secondary organizational identifier (e.g., department, team, project) within a tenant for hierarchical data organization; defaults to tenant_id if not provided",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "source_id",
              "in": "query",
              "required": true,
              "description": "The ID of the source to update",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "description": "The updated text/markdown content"
                    },
                    "tenant_metadata": {
                      "type": "object",
                      "description": "Custom tenant-level metadata"
                    },
                    "document_metadata": {
                      "type": "object",
                      "description": "Custom document-level metadata"
                    }
                  },
                  "required": [
                    "content"
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Update accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      },
                      "file_id": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "success": true,
                    "message": "Markdown update message pushed to SQS.",
                    "file_id": "CortexDoc123"
                  }
                }
              }
            },
            "400": {
              "description": "Missing source_id or invalid payload"
            },
            "401": {
              "description": "Invalid or missing API key"
            },
            "5XX": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/upload/update_webpage": {
        "patch": {
          "description": "Updates an existing webpage scrape job by source ID and new URL.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "web_url",
              "in": "query",
              "required": true,
              "description": "The public URL to scrape",
              "schema": {
                "type": "string"
              },
              "example": "https://example.com/article"
            },
            {
              "name": "tenant_id",
              "in": "query",
              "required": true,
              "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sub_tenant_id",
              "in": "query",
              "required": false,
              "description": "Secondary organizational identifier (e.g., department, team, project) within a tenant for hierarchical data organization; defaults to tenant_id if not provided",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "source_id",
              "in": "query",
              "required": true,
              "description": "Source ID of the existing scrape job",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Update accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      },
                      "file_id": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "success": true,
                    "message": "Scrape webpage job updated to S3 and SQS.",
                    "file_id": "ScrapeJob123"
                  }
                }
              }
            },
            "400": {
              "description": "Missing source_id or invalid parameters"
            },
            "401": {
              "description": "Invalid or missing API key"
            },
            "5XX": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/upload/upload_app_sources": {
        "post": {
          "description": "Works similar to the upload endpoint but is specifically designed to upload multiple app sources (e.g., Gmail, Slack, Notion) in a single request for processing and indexing.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "description": "Request content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "tenant_id",
              "in": "query",
              "required": false,
              "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sub_tenant_id",
              "in": "query",
              "required": false,
              "description": "Secondary organizational identifier (e.g., department, team, project) within a tenant for hierarchical data organization; defaults to tenant_id if not provided",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "collections": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Array of collection names that this source belongs to"
                      },
                      "id": {
                        "type": "string",
                        "description": "Unique identifier for the app source"
                      },
                      "title": {
                        "type": "string",
                        "description": "Title or name of the app source"
                      },
                      "type": {
                        "type": "string",
                        "description": "Type of the app source (e.g., gmail, slack, notion)"
                      },
                      "description": {
                        "type": "string",
                        "description": "Description of the app source content"
                      },
                      "note": {
                        "type": "string",
                        "description": "Additional notes or comments about the source"
                      },
                      "url": {
                        "type": "string",
                        "description": "URL associated with the app source"
                      },
                      "timestamp": {
                        "type": "string",
                        "description": "Timestamp when the source was created or last modified"
                      },
                      "content": {
                        "type": "object",
                        "description": "Content data of the app source in various formats",
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "Plain text content of the source"
                          },
                          "html_base64": {
                            "type": "string",
                            "description": "Base64 encoded HTML content"
                          },
                          "csv_base64": {
                            "type": "string",
                            "description": "Base64 encoded CSV data"
                          },
                          "markdown": {
                            "type": "string",
                            "description": "Markdown formatted content"
                          },
                          "files": {
                            "type": "array",
                            "description": "Array of associated files"
                          },
                          "layout": {
                            "type": "array",
                            "description": "Layout information for the content"
                          }
                        }
                      },
                      "cortex_metadata": {
                        "type": "object",
                        "description": "Custom metadata object that can include file_id. If file_id is not provided, the system will generate an ID automatically."
                      },
                      "meta": {
                        "type": "object",
                        "description": "Additional metadata associated with the source"
                      },
                      "attachments": {
                        "type": "array",
                        "description": "Array of attachments associated with the app source",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "Unique identifier for the attachment"
                            },
                            "url": {
                              "type": "string",
                              "description": "URL of the attachment"
                            },
                            "title": {
                              "type": "string",
                              "description": "Title or name of the attachment"
                            },
                            "content_type": {
                              "type": "string",
                              "description": "MIME type of the attachment content"
                            },
                            "content_url": {
                              "type": "string",
                              "description": "Direct URL to access the attachment content"
                            },
                            "misc": {
                              "type": "object",
                              "description": "Miscellaneous metadata for the attachment"
                            },
                            "content": {
                              "type": "object",
                              "description": "Content data of the attachment in various formats",
                              "properties": {
                                "text": {
                                  "type": "string",
                                  "description": "Plain text content of the attachment"
                                },
                                "html_base64": {
                                  "type": "string",
                                  "description": "Base64 encoded HTML content"
                                },
                                "csv_base64": {
                                  "type": "string",
                                  "description": "Base64 encoded CSV data"
                                },
                                "markdown": {
                                  "type": "string",
                                  "description": "Markdown formatted content"
                                },
                                "files": {
                                  "type": "array",
                                  "description": "Array of associated files"
                                },
                                "layout": {
                                  "type": "array",
                                  "description": "Layout information for the content"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "required": [
                      "id",
                      "title",
                      "type",
                      "timestamp",
                      "content"
                    ]
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "App sources uploaded successfully"
            },
            "422": {
              "description": "Incomplete/invalid parameters"
            },
            "401": {
              "description": "Invalid or missing API key"
            },
            "5XX": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/search/qna": {
        "post": {
          "description": "Ask a question to your uploaded knowledge base and let Cortex AI answer it.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "description": "Request content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "question": {
                      "type": "string",
                      "description": "The original user query."
                    },
                    "user_name": {
                      "type": "string",
                      "description": "User name to personalize the final answer generation."
                    },
                    "user_instructions": {
                      "type": "string",
                      "description": "Custom instructions that you or your users can provide to Cortex to personalize the final answer generation."
                    },
                    "session_id": {
                      "type": "string",
                      "description": "Chat session ID to track the conversation history and maintain session context. Always provide a new session ID for each new chat session."
                    },
                    "tenant_id": {
                      "type": "string",
                      "description": "Tenant identifier to restrict the search to a specific tenant."
                    },
                    "sub_tenant_id": {
                      "type": "string",
                      "description": "Sub-tenant identifier to restrict the search to a specific sub-tenant."
                    },
                    "stream": {
                      "type": "boolean",
                      "description": "Enable streaming to receive your answer in a stream."
                    },
                    "context_list": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "List of document IDs to restrict and focus the search to a specific set of documents."
                    },
                    "search_modes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Give your agents additional tools to answer user questions. Current supported search modes are: 'web' and 'creative'. 'web' mode is used to search the web for the most relevant information. 'creative' mode is used to generate a creative answer to the user's question."
                    },
                    "top_n": {
                      "type": "number",
                      "default": 20,
                      "description": "Number of results to return from the search."
                    },
                    "ai_generation": {
                      "type": "boolean",
                      "description": "Enable Cortex to directly answer the user's question using the search results and AI."
                    },
                    "highlight_chunks": {
                      "type": "boolean",
                      "description": "Return source chunks to highlight the exact location of the cited content within the documents."
                    },
                    "search_alpha": {
                      "type": "number",
                      "default": 0.8,
                      "format": "float",
                      "description": "Weight for semantic match. Cortex search combines the results of a vector search and a keyword (BM25F) search by fusing the two result sets. Alpha is the weight for the vector search. An Alpha of 0.0 means only keyword search is used, and an Alpha of 1.0 means only vector search is used. An Alpha of 0 means only keyword search is used."
                    },
                    "recency_bias": {
                      "type": "number",
                      "format": "float",
                      "default": 0.5,
                      "description": "Recency bias describes the preference for more recent sources. A value of 0 means no preference, a value of 1 means recent sources are strongly considered."
                    },
                    "multi_step_reasoning": {
                      "type": "boolean",
                      "default": true,
                      "description": "If enabled, Cortex search will break down complex queries into multiple steps for a deep search across your knowledge base. If set to false, auto-enabling of multi-step search is disabled, and only single-step search will be used regardless of query complexity."
                    },
                    "auto_agent_routing": {
                      "type": "boolean",
                      "default": true,
                      "description": "If true, enables routing for choosing the best suitable agent automatically; if false, the answer is generated from the default model."
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Filter context to only sources matching the metadata filters you provide. Allowed keys are source_title and source_type.",
                      "properties": {
                        "source_title": {
                          "type": "string",
                          "description": "Restrict to sources with this title."
                        },
                        "source_type": {
                          "type": "string",
                          "description": "Restrict to sources of this type (e.g., document, webpage)."
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "question",
                    "session_id",
                    "tenant_id"
                  ]
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/search/retrieve": {
        "post": {
          "description": "Hybrid search using either traditional keyword methods or neural (embeddings-based) search for your knowledge base.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "description": "Request content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "query": {
                      "type": "string",
                      "description": "Search query string to find relevant content from indexed sources."
                    },
                    "tenant_id": {
                      "type": "string",
                      "description": "Tenant identifier for multi-tenancy to restrict search scope."
                    },
                    "sub_tenant_id": {
                      "type": "string",
                      "description": "Sub-tenant identifier, defaults to tenant_id if not provided."
                    },
                    "max_chunks": {
                      "type": "integer",
                      "description": "Maximum number of chunks to return from the search."
                    },
                    "alpha": {
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "float",
                          "default": 0.8
                        },
                        {
                          "type": "string",
                          "enum": ["auto"]
                        }
                      ],
                      "description": "Search algorithm parameter for result ranking. Controls the balance between semantic and keyword search (0.0 = keyword only, 1.0 = semantic only). Use 'auto' to let Cortex intelligently decide the optimal alpha value based on the query."
                    },
                    "recency_bias": {
                      "type": "number",
                      "format": "float",
                      "default": 0.5,
                      "description": "Bias towards more recent content. A value of 0 means no preference, a value of 1 means recent sources are strongly preferred."
                    }
                  },
                  "required": [
                    "query"
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful search results",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "chunk_uuid": {
                          "type": "string",
                          "description": "Unique identifier for the content chunk",
                          "example": "CortexDoc37e854b429784b148d4fc910812bdc581753761779_20_v1"
                        },
                        "source_id": {
                          "type": "string",
                          "description": "Identifier of the source document",
                          "example": "CortexDoc37e854b429784b148d4fc910812bdc581753761779"
                        },
                        "source_title": {
                          "type": "string",
                          "description": "Title of the source document",
                          "example": "IEEE Transactions LaTeX Templates.pdf"
                        },
                        "chunk_content": {
                          "type": "string",
                          "description": "The relevant content chunk",
                          "example": "JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015 12 Fig. 10: Comparison of models with 4bit precision on Medical QA dataset..."
                        },
                        "source_url": {
                          "type": "string",
                          "description": "URL or path to the source document",
                          "example": "ToayuCogoBdxZVoZQ1ft8ZoRzCO2/Hello/Hello/local_source/CortexDoc37e854b429784b148d4fc910812bdc581753761779"
                        },
                        "source_upload_time": {
                          "type": "string",
                          "description": "Timestamp when the source was uploaded",
                          "example": "1753761802.079415"
                        },
                        "source_collection": {
                          "type": "array",
                          "description": "Collection tags associated with the source",
                          "items": {
                            "type": "string"
                          },
                          "example": []
                        },
                        "source_type": {
                          "type": "string",
                          "description": "Type of the source document",
                          "example": "file"
                        },
                        "layout": {
                          "type": "string",
                          "description": "JSON string containing layout information for the chunk",
                          "example": "{\"coordinates\": {\"x\": 48.96399688720703, \"y\": 26.49277114868164, \"width\": 514.0717697143555, \"height\": 721.1119651794434}, \"page\": 12}"
                        },
                        "version": {
                          "type": "string",
                          "description": "Version of the chunk",
                          "example": "v1"
                        },
                        "source_last_updated_time": {
                          "type": "string",
                          "description": "Timestamp when the source was last updated",
                          "example": ""
                        },
                        "relevancy_score": {
                          "type": "number",
                          "format": "float",
                          "description": "Relevance score of the result",
                          "example": 0.8363813161849976
                        },
                        "rerank_score": {
                          "type": "number",
                          "format": "float",
                          "nullable": true,
                          "description": "Rerank score if available",
                          "example": null
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - invalid parameters"
            },
            "401": {
              "description": "Unauthorized - invalid API key"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/search/full-text-search": {
        "post": {
          "description": "Full text search endpoint for Cortex customers. Uses full text search with configurable operators for precise text matching.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "description": "Request content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "query": {
                      "type": "string",
                      "description": "Search query string to find relevant content from indexed sources."
                    },
                    "tenant_id": {
                      "type": "string",
                      "description": "Tenant identifier for multi-tenancy to restrict search scope."
                    },
                    "sub_tenant_id": {
                      "type": "string",
                      "description": "Sub-tenant identifier, defaults to empty string if not provided.",
                      "default": ""
                    },
                    "operator": {
                      "type": "string",
                      "enum": ["or", "and"],
                      "default": "or",
                      "description": "Search operator type. OR operator requires at least one token to be present, AND operator requires all tokens to be present."
                    },
                    "max_chunks": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 1001,
                      "description": "Maximum number of content chunks to return from the search."
                    }
                  },
                  "required": [
                    "query",
                    "tenant_id"
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful full text search results",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "chunk_uuid": {
                          "type": "string",
                          "description": "Unique identifier for the content chunk",
                          "example": "CortexDoc37e854b429784b148d4fc910812bdc581753761779_20_v1"
                        },
                        "source_id": {
                          "type": "string",
                          "description": "Identifier of the source document",
                          "example": "CortexDoc37e854b429784b148d4fc910812bdc581753761779"
                        },
                        "source_title": {
                          "type": "string",
                          "description": "Title of the source document",
                          "example": "IEEE Transactions LaTeX Templates.pdf"
                        },
                        "chunk_content": {
                          "type": "string",
                          "description": "The relevant content chunk",
                          "example": "JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015 12 Fig. 10: Comparison of models with 4bit precision on Medical QA dataset..."
                        },
                        "source_url": {
                          "type": "string",
                          "description": "URL or path to the source document",
                          "example": "ToayuCogoBdxZVoZQ1ft8ZoRzCO2/Hello/Hello/local_source/CortexDoc37e854b429784b148d4fc910812bdc581753761779"
                        },
                        "source_upload_time": {
                          "type": "string",
                          "description": "Timestamp when the source was uploaded",
                          "example": "1753761802.079415"
                        },
                        "source_collection": {
                          "type": "array",
                          "description": "Collection tags associated with the source",
                          "items": {
                            "type": "string"
                          },
                          "example": []
                        },
                        "source_type": {
                          "type": "string",
                          "description": "Type of the source document",
                          "example": "file"
                        },
                        "layout": {
                          "type": "string",
                          "description": "JSON string containing layout information for the chunk",
                          "example": "{\"coordinates\": {\"x\": 48.96399688720703, \"y\": 26.49277114868164, \"width\": 514.0717697143555, \"height\": 721.1119651794434}, \"page\": 12}"
                        },
                        "version": {
                          "type": "string",
                          "description": "Version of the chunk",
                          "example": "v1"
                        },
                        "source_last_updated_time": {
                          "type": "string",
                          "description": "Timestamp when the source was last updated",
                          "example": ""
                        },
                        "relevancy_score": {
                          "type": "number",
                          "format": "float",
                          "description": "Relevance score of the result",
                          "example": 0.8363813161849976
                        },
                        "rerank_score": {
                          "type": "number",
                          "format": "float",
                          "nullable": true,
                          "description": "Rerank score if available",
                          "example": null
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - invalid parameters (e.g., max_chunks out of range)"
            },
            "401": {
              "description": "Unauthorized - invalid API key"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/list/sources": {
        "get": {
          "description": "Fetches all documents for a given tenant.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "tenant_id",
              "in": "query",
              "required": true,
              "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation",
              "schema": {
                "type": "string"
              },
              "example": "tenant_456"
            },
            {
              "name": "sub_tenant_id",
              "in": "query",
              "required": false,
              "description": "Secondary organizational identifier (e.g., department, team, project) within a tenant for hierarchical data organization; defaults to tenant_id if not provided",
              "schema": {
                "type": "string"
              },
              "example": "subtenant_123"
            }
          ],
          "responses": {
            "200": {
              "description": "List of sources returned successfully"
            },
            "422": {
              "description": "Incomplete/invalid parameters"
            },
            "401": {
              "description": "Invalid or missing API key"
            },
            "5XX": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/list/sources_by_id": {
        "post": {
          "description": "Fetches specific documents by their IDs.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "description": "Request content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tenant_id": {
                      "type": "string",
                      "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation",
                      "example": "tenant_456"
                    },
                    "sub_tenant_id": {
                      "type": "string",
                      "description": "Sub tenant identifier",
                      "example": "subtenant_123"
                    },
                    "source_ids": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "IDs of documents",
                      "example": [
                        "doc_123",
                        "doc_456"
                      ]
                    }
                  },
                  "required": [
                    "tenant_id",
                    "source_ids"
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Sources returned successfully"
            },
            "422": {
              "description": "Incomplete/invalid parameters"
            },
            "401": {
              "description": "Invalid or missing API key"
            },
            "5XX": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/delete_source": {
        "delete": {
          "description": "Deletes specific documents associated with a tenant or sub-tenant.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "description": "Request content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tenant_id": {
                      "type": "string",
                      "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation",
                      "example": "tenant_456"
                    },
                    "sub_tenant_id": {
                      "type": "string",
                      "description": "Sub tenant identifier",
                      "example": "subtenant_123"
                    },
                    "source_ids": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "IDs of documents to delete",
                      "example": [
                        "doc_123",
                        "doc_456"
                      ]
                    }
                  },
                  "required": [
                    "tenant_id",
                    "source_ids"
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Memory deleted successfully"
            },
            "422": {
              "description": "Incomplete/invalid parameters"
            },
            "401": {
              "description": "Invalid or missing API key"
            },
            "5XX": {
              "description": "Internal server error"
            }
          }
        },
        "post": {
          "description": "Deletes specific documents or memories associated with a user (POST alternative).",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "description": "Request content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tenant_id": {
                      "type": "string",
                      "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation",
                      "example": "tenant_456"
                    },
                    "source_ids": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "IDs of documents to delete",
                      "example": [
                        "doc_123",
                        "doc_456"
                      ]
                    }
                  },
                  "required": [
                    "tenant_id",
                    "source_ids"
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Memory deleted successfully (POST)"
            },
            "422": {
              "description": "Incomplete/invalid parameters"
            },
            "401": {
              "description": "Invalid or missing API key"
            },
            "5XX": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/upload/verify_processing": {
        "post": {
          "description": "Checks if a document has been successfully processed.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "description": "Request content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "file_id",
              "in": "query",
              "required": true,
              "description": "ID of the uploaded file",
              "schema": {
                "type": "string"
              },
              "example": "file_123"
            }
          ],
          "responses": {
            "200": {
              "description": "Processing status returned successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "file_id": {
                        "type": "string",
                        "description": "ID of the uploaded file",
                        "example": "123123123123"
                      },
                      "indexing_status": {
                        "type": "string",
                        "enum": [
                          "success",
                          "in_progress",
                          "errored"
                        ],
                        "description": "Indexing status of the file",
                        "example": "success"
                      }
                    },
                    "required": [
                      "file_id",
                      "indexing_status"
                    ]
                  },
                  "example": {
                    "file_id": "123123123123",
                    "indexing_status": "success"
                  }
                }
              }
            },
            "422": {
              "description": "Incomplete/invalid parameters"
            },
            "401": {
              "description": "Invalid or missing API key"
            },
            "5XX": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/fetch/fetch_content": {
        "post": {
          "description": "Fetches the download URL for a specific uploaded document.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "description": "Request content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file_id": {
                      "type": "string",
                      "description": "ID of the file to fetch the download URL for."
                    },
                    "tenant_id": {
                      "type": "string",
                      "description": "Tenant identifier."
                    },
                    "sub_tenant_id": {
                      "type": "string",
                      "description": "Sub-tenant identifier.",
                      "default": ""
                    }
                  },
                  "required": [
                    "file_id",
                    "tenant_id"
                  ]
                },
                "examples": {
                  "fetch_content": {
                    "summary": "Fetch download URL for a file",
                    "value": {
                      "file_id": "file_123456",
                      "tenant_id": "tenant_456",
                      "sub_tenant_id": "subtenant_123"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Returns a JSON object with file IDs as keys and their corresponding download URLs as values",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string",
                      "description": "Download URL for the file ID key."
                    }
                  },
                  "example": {
                    "CortexDocb7a1db714c9": "https://cortex-local-sources-prod.s3.amazonaws.com/ToayuCogoBdxZVoZQ1ft8ZoRzCO2/FindrMasterCollectionMemoriesPreprod/123/local_source/CortexDocb7a1db714c9?..."
                  }
                }
              }
            },
            "404": {
              "description": "File not found or not accessible with the provided credentials."
            },
            "422": {
              "description": "Incomplete/invalid parameters"
            },
            "401": {
              "description": "Invalid or missing API key"
            },
            "5XX": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/user_memory/list_user_memories": {
        "get": {
          "description": "Retrieves and lists all AI memories for your user.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "description": "Request content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "tenant_id",
              "in": "query",
              "required": true,
              "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sub_tenant_id",
              "in": "query",
              "required": true,
              "description": "Secondary organizational identifier (e.g., department, team, project) within a tenant for hierarchical data organization; defaults to tenant_id if not provided",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of user memories returned successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean"
                      },
                      "user_memories": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "source_id": {
                              "type": "string",
                              "description": "Unique identifier for the memory"
                            },
                            "source_content": {
                              "type": "string",
                              "description": "Content of the user memory"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Invalid or missing API key"
            },
            "422": {
              "description": "Incomplete/invalid parameters"
            },
            "5XX": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/user_memory/delete_user_memory": {
        "delete": {
          "description": "Deletes a specific user memory for a cortex user.",
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "description": "Request content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "tenant_id",
              "in": "query",
              "required": true,
              "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sub_tenant_id",
              "in": "query",
              "required": true,
              "description": "Secondary organizational identifier (e.g., department, team, project) within a tenant for hierarchical data organization; defaults to tenant_id if not provided",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "memory_id",
              "in": "query",
              "required": true,
              "description": "user memory ID to delete",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Memory deletion result",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean"
                      },
                      "user_memory_deleted": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Invalid or missing API key"
            },
            "422": {
              "description": "Incomplete/invalid parameters"
            },
            "5XX": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/user_memory/retrieve_user_memory": {
        "get": {
          "description": "Searches and retrieves relevant user memories based on a query.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "description": "Request content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "tenant_id",
              "in": "query",
              "required": true,
              "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sub_tenant_id",
              "in": "query",
              "required": true,
              "description": "Secondary organizational identifier (e.g., department, team, project) within a tenant for hierarchical data organization; defaults to tenant_id if not provided",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "query",
              "in": "query",
              "required": true,
              "description": "Search query to find relevant memories",
              "schema": {
                "type": "string"
              },
              "example": "project meeting notes"
            },
            {
              "name": "max_count",
              "in": "query",
              "required": false,
              "description": "Maximum number of memories to return",
              "schema": {
                "type": "integer"
              },
              "example": 10
            }
          ],
          "responses": {
            "200": {
              "description": "Relevant memories returned successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "description": "Indicates whether the memory retrieval operation was successful"
                      },
                      "user_memories": {
                        "type": "array",
                        "description": "Array of user memories matching the search query",
                        "items": {
                          "type": "object",
                          "description": "User memory objects matching the search query"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Invalid or missing API key"
            },
            "422": {
              "description": "Incomplete/invalid parameters"
            },
            "5XX": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/user_memory/add_user_memory": {
        "post": {
          "description": "Manually add a new user memory for a user.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "description": "Request content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "tenant_id",
              "in": "query",
              "required": true,
              "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sub_tenant_id",
              "in": "query",
              "required": true,
              "description": "Secondary organizational identifier (e.g., department, team, project) within a tenant for hierarchical data organization; defaults to tenant_id if not provided",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "user_memory",
              "in": "query",
              "required": true,
              "description": "User memory to be added to their vector store",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Memory insertion result",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "description": "Indicates whether the memory addition operation was successful"
                      },
                      "user_memory_added": {
                        "type": "boolean",
                        "description": "Confirms whether the user memory was successfully added to the vector store"
                      }
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Incomplete/invalid parameters"
            },
            "401": {
              "description": "Invalid or missing API key"
            },
            "5XX": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/user_memory/generate_user_memory": {
        "post": {
          "description": "Automatically generates and saves user memories based on a user query. This endpoint combines query processing, memory generation, and storage.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "description": "Request content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "tenant_id",
              "in": "query",
              "required": true,
              "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sub_tenant_id",
              "in": "query",
              "required": true,
              "description": "Secondary organizational identifier (e.g., department, team, project) within a tenant for hierarchical data organization; defaults to tenant_id if not provided",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "user_query",
              "in": "query",
              "required": true,
              "description": "User query to generate memories from",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "user_name",
              "in": "query",
              "required": true,
              "description": "Name of the user for personalization",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Generated memories returned successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "description": "Indicates whether the memory generation operation was successful"
                      },
                      "generated_user_memories": {
                        "type": "array",
                        "description": "Array of user memories that were automatically generated and stored",
                        "items": {
                          "type": "string",
                          "description": "Generated user memory objects that were created and stored"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Invalid or missing API key"
            },
            "422": {
              "description": "Incomplete/invalid parameters"
            },
            "5XX": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/embeddings/delete": {
        "delete": {
          "description": "Delete specific embedding chunks from indexed sources.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "description": "Request content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "chunk_ids": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "List of chunk IDs to delete",
                      "example": ["CortexEmbeddings123_1"]
                    },
                    "tenant_id": {
                      "type": "string",
                      "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation",
                      "example": "tenant_456"
                    },
                    "sub_tenant_id": {
                      "type": "string",
                      "description": "Secondary organizational identifier (e.g., department, team, project) within a tenant for hierarchical data organization; defaults to tenant_id if not provided",
                      "example": "subtenant_123"
                    }
                  },
                  "required": ["chunk_ids", "tenant_id"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Embedding chunks deleted successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "object",
                        "description": "Status of deletion for each chunk ID (chunk_id -> success boolean)",
                        "additionalProperties": {
                          "type": "boolean"
                        },
                        "example": {"CortexEmbeddings123_1": true}
                      },
                      "total_deleted": {
                        "type": "integer",
                        "description": "Number of chunks successfully deleted",
                        "example": 1
                      }
                    },
                    "required": ["status", "total_deleted"]
                  },
                  "example": {
                    "status": {"CortexEmbeddings123_1": true},
                    "total_deleted": 1
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request (empty chunk_ids or invalid format)"
            },
            "401": {
              "description": "Invalid or missing API key"
            },
            "5XX": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/embeddings/search": {
        "post": {
          "description": "Search for similar embedding chunks using vector similarity.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "description": "Request content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "embeddings": {
                      "type": "array",
                      "items": {
                        "type": "number",
                        "format": "float"
                      },
                      "description": "Single embedding vector for similarity search",
                      "example": [0.1, 0.2, 0.3, 0.4, 0.5]
                    },
                    "tenant_id": {
                      "type": "string",
                      "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation",
                      "example": "tenant_456"
                    },
                    "sub_tenant_id": {
                      "type": "string",
                      "description": "Secondary organizational identifier (e.g., department, team, project) within a tenant for hierarchical data organization; defaults to tenant_id if not provided",
                      "example": "subtenant_123"
                    },
                    "max_chunks": {
                      "type": "integer",
                      "description": "Maximum number of chunk IDs to return",
                      "default": 10,
                      "minimum": 1,
                      "maximum": 200,
                      "example": 10
                    }
                  },
                  "required": ["embeddings", "tenant_id"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Similar embedding chunks found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "chunk_ids": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "List of similar chunk IDs ordered by similarity score (highest first)",
                        "example": ["CortexEmbeddings123_0", "CortexEmbeddings456_0", "CortexEmbeddings456_1", "CortexEmbeddings123_2", "CortexEmbeddings123_8"]
                      },
                      "scores": {
                        "type": "array",
                        "items": {
                          "type": "number",
                          "format": "float",
                          "minimum": 0.0,
                          "maximum": 1.0
                        },
                        "description": "Similarity scores corresponding to each chunk ID (0.0 to 1.0, higher is more similar)",
                        "example": [0.95, 0.89, 0.87, 0.82, 0.78]
                      }
                    },
                    "required": ["chunk_ids", "scores"]
                  },
                  "example": {
                    "chunk_ids": ["CortexEmbeddings123_0", "CortexEmbeddings456_0", "CortexEmbeddings456_1", "CortexEmbeddings123_2", "CortexEmbeddings123_8"],
                    "scores": [0.95, 0.89, 0.87, 0.82, 0.78]
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request (empty embeddings or invalid dimensions)"
            },
            "401": {
              "description": "Invalid or missing API key"
            },
            "5XX": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/upload/upload_embeddings": {
        "post": {
          "description": "Uploads embeddings as a 2D array for processing and indexing.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "description": "Request content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "tenant_id",
              "in": "query",
              "required": false,
              "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sub_tenant_id",
              "in": "query",
              "required": false,
              "description": "Secondary organizational identifier (e.g., department, team, project) within a tenant for hierarchical data organization; defaults to tenant_id if not provided",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "embeddings": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "number",
                          "format": "float"
                        }
                      },
                      "description": "2D array of embedding vectors (max 2000 rows x 3024 columns)",
                      "example": [[0.1, 0.2, 0.3, 0.4, 0.5], [0.6, 0.7, 0.8, 0.9, 1.0]]
                    },
                    "file_id": {
                      "type": "string",
                      "description": "Custom file identifier. If not provided, the system will generate an ID automatically.",
                      "example": "custom_embeddings_123"
                    }
                  },
                  "required": ["embeddings"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Embeddings uploaded successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "description": "Indicates if the upload was successful",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "description": "Status message about the upload operation",
                        "example": "Embeddings upload message pushed to SQS."
                      },
                      "chunk_ids": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Generated chunk IDs for the uploaded embeddings in format batch_id_index",
                        "example": ["CortexEmbeddings123_0", "CortexEmbeddings123_1", "CortexEmbeddings123_2"]
                      },
                      "batch_id": {
                        "type": "string",
                        "description": "Unique batch identifier for grouping these embeddings",
                        "example": "CortexEmbeddings123"
                      }
                    },
                    "required": ["success", "message", "chunk_ids", "batch_id"]
                  },
                  "example": {
                    "success": true,
                    "message": "Embeddings upload message pushed to SQS.",
                    "chunk_ids": ["CortexEmbeddings123_0", "CortexEmbeddings123_1"],
                    "batch_id": "CortexEmbeddings123"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid embeddings format or dimensions exceed limits"
            },
            "401": {
              "description": "Invalid or missing API key"
            },
            "5XX": {
              "description": "Internal server error"
          }
        }
      }
    },
      "/embeddings/by-chunk-ids": {
      "post": {
          "description": "Retrieve embeddings for specific chunk IDs.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": { "type": "string" },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "description": "Request content type",
              "schema": { "type": "string", "default": "application/json" }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": { "type": "string", "default": "application/json" }
            }
          ],
        "requestBody": {
            "required": true,
          "content": {
            "application/json": {
              "schema": {
                  "type": "object",
                  "properties": {
                    "chunk_ids": {
                      "type": "array",
                      "items": { "type": "string" },
                      "description": "List of chunk IDs to retrieve embeddings for",
                      "example": ["CortexEmbeddings123_0", "CortexEmbeddings123_1"]
                    },
                    "tenant_id": {
                      "type": "string",
                      "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation",
                      "example": "tenant_456"
                    },
                    "sub_tenant_id": {
                      "type": "string",
                      "description": "Secondary organizational identifier (e.g., department, team, project) within a tenant for hierarchical data organization; defaults to tenant_id if not provided",
                      "example": "subtenant_123"
                    }
                  },
                  "required": ["chunk_ids", "tenant_id"]
                }
              }
            }
        },
        "responses": {
          "200": {
              "description": "Embeddings retrieved successfully",
            "content": {
              "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "embeddings": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "array",
                          "items": { "type": "number", "format": "float" }
                        },
                        "description": "Mapping of chunk_id to its embedding vector",
                        "example": {"CortexEmbeddings123_0": [0.12, 0.34, 0.56, 0.78], "CortexEmbeddings123_1": [0.11, 0.33, 0.55, 0.77]}
                      },
                      "not_found_chunk_ids": {
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "List of chunk IDs that were not found",
                        "example": []
                      }
                    },
                    "required": ["embeddings"]
                  },
                  "example": {
                    "embeddings": {"CortexEmbeddings123_0": [0.12, 0.34, 0.56, 0.78], "CortexEmbeddings123_1": [0.11, 0.33, 0.55, 0.77]},
                    "not_found_chunk_ids": []
                  }
                }
              }
            },
            "400": { "description": "Invalid request (empty chunk_ids or invalid format)" },
            "401": { "description": "Invalid or missing API key" },
            "5XX": { "description": "Internal server error" }
          }
        }
      },
      "/upload/update_embeddings": {
        "patch": {
          "description": "Updates existing embeddings using chunk IDs and new embedding vectors.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": {
                "type": "string"
              },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "description": "Request content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "tenant_id",
              "in": "query",
              "required": false,
              "description": "Primary organizational identifier (e.g., enterprise client, company) for multi-tenant data isolation",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sub_tenant_id",
              "in": "query",
              "required": false,
              "description": "Secondary organizational identifier (e.g., department, team, project) within a tenant for hierarchical data organization; defaults to tenant_id if not provided",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "embeddings": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "number",
                          "format": "float"
                        }
                      },
                      "description": "Dictionary with chunk IDs as keys and embedding arrays as values",
                      "example": {
                        "CortexEmbeddings123_0": [0.1, 0.2, 0.3, 0.4, 0.5],
                        "CortexEmbeddings123_1": [0.6, 0.7, 0.8, 0.9, 1.0]
                      }
                    }
                  },
                  "required": ["embeddings"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Embeddings updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "description": "Indicates if the update was successful",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "description": "Status message about the update operation",
                        "example": "Embeddings update message pushed to SQS."
                      },
                      "chunk_ids": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "List of chunk IDs that were updated",
                        "example": ["CortexEmbeddings123_0", "CortexEmbeddings123_1"]
                      },
                      "batch_id": {
                        "type": "string",
                        "description": "Batch identifier extracted from chunk IDs",
                        "example": "CortexEmbeddings123"
                      },
                      "updated_count": {
                        "type": "integer",
                        "description": "Number of embeddings that were updated",
                        "example": 2
                      }
                    },
                    "required": ["success", "message", "chunk_ids", "batch_id"]
                  },
                  "example": {
                    "success": true,
                    "message": "Embeddings update message pushed to SQS.",
                    "chunk_ids": ["CortexEmbeddings123_0", "CortexEmbeddings123_1"],
                    "batch_id": "CortexEmbeddings123",
                    "updated_count": 2
                  }
                }
              }
            },
            "400": {
              "description": "Invalid embeddings format, chunk IDs from different batches, or dimensions exceed limits"
            },
            "401": {
              "description": "Invalid or missing API key"
            },
            "5XX": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/user/create_tenant": {
        "post": {
          "description": "Creates a tenant. If tenant_id is provided it will be used; otherwise a new tenant_id is generated.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": { "type": "string" },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": { "type": "string", "default": "application/json" }
            },
            {
              "name": "tenant_id",
              "in": "query",
              "required": false,
              "description": "Optional tenant identifier. If omitted, a new tenant_id will be generated.",
              "schema": { "type": "string" },
              "example": "my_tenant_id"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tenant_metadata_schema": {
                      "type": "array",
                      "description": "Schema for tenant-level metadata. Each object specifies a metadata key, type, and whether it is searchable/filterable.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": { "type": "string", "description": "The metadata key name" },
                          "type": { "type": "string", "enum": ["text", "number", "boolean", "date"], "description": "Data type for the metadata field" },
                          "searchable": { "type": "boolean", "description": "Whether this field can be searched" },
                          "filterable": { "type": "boolean", "description": "Whether this field can be used for filtering" }
                        },
                        "required": ["key", "type", "searchable", "filterable"]
                      }
                    }
                  }
                },
                "example": {
                  "tenant_metadata_schema": [
                    { "key": "demo", "type": "text", "searchable": true, "filterable": true },
                    { "key": "test", "type": "number", "searchable": true, "filterable": true }
                  ]
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Tenant created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": { "type": "string", "description": "Status of the tenant creation operation", "example": "success" },
                      "message": { "type": "string", "description": "Human-readable message about the operation", "example": "Tenant '99155#$@e2' created successfully." },
                      "tenant_id": { "type": "string", "description": "The created tenant identifier", "example": "B1SlKQ2j2l1aWYLa" }
                    },
                    "required": ["status", "message", "tenant_id"]
                  },
                  "example": { "status": "success", "message": "Tenant '99155#$@e2' created successfully.", "tenant_id": "B1SlKQ2j2l1aWYLa" }
                }
              }
            },
            "409": { "description": "Tenant already exists" },
            "401": { "description": "Invalid or missing API key" },
            "5XX": { "description": "Internal server error" }
          }
        }
      },
      "/embeddings/create_embeddings_tenant": {
        "post": {
          "description": "Creates an embeddings-only tenant. Use this for direct embeddings upload and search workflows.",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "description": "Bearer token (your API key)",
              "schema": { "type": "string" },
              "example": "Bearer {API_KEY}"
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "description": "Response content type",
              "schema": { "type": "string", "default": "application/json" }
            },
            {
              "name": "tenant_id",
              "in": "query",
              "required": true,
              "description": "The tenant identifier.",
              "schema": { "type": "string" },
              "example": "embeddings_test"
            }
          ],
          "responses": {
            "200": {
              "description": "Embeddings tenant created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": { "type": "string", "description": "Status of the embeddings tenant creation operation", "example": "success" },
                      "message": { "type": "string", "description": "Human-readable message about the operation", "example": "Tenant 'embeddings_test' created successfully." },
                      "tenant_id": { "type": "string", "description": "The created tenant identifier", "example": "embeddings_test" }
                    },
                    "required": ["status", "message", "tenant_id"]
                  },
                  "example": { "status": "success", "message": "Tenant 'embeddings_test' created successfully.", "tenant_id": "embeddings_test" }
                }
              }
            },
            "409": { "description": "Tenant already exists" },
            "401": { "description": "Invalid or missing API key" },
            "5XX": { "description": "Internal server error" }
          }
        }
      }
    },
    "components": {
      "schemas": {},
      "securitySchemes": {
        "bearerAuth": {
          "type": "http",
          "scheme": "bearer"
        }
      }
    }
  }